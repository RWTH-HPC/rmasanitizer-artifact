<?xml version="1.0" encoding="UTF-8"?>
<workpackages>
  <workpackage id="0">
    <step iteration="0" cycle="0">build_must</step>
    <parameterset>
      <parameter name="toolchain_name" type="string" separator="," duplicate="none" mode="text">
        <value>GCC</value>
      </parameter>
      <parameter name="toolchain_version" type="string" separator="," duplicate="none" mode="text">
        <value>12.3.0</value>
      </parameter>
      <parameter name="compiler_name" type="string" separator="," duplicate="none" mode="text">
        <value>Classic-Flang</value>
      </parameter>
      <parameter name="compiler_version" type="string" separator="," duplicate="none" mode="text">
        <value>16.0.4-c23</value>
      </parameter>
      <parameter name="mpi_name" type="string" separator="," duplicate="none" mode="text">
        <value>openmpi</value>
      </parameter>
      <parameter name="mpi_version" type="string" separator="," duplicate="none" mode="text">
        <value>4.1.6</value>
      </parameter>
      <parameter name="modulenames_defaults" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;gcc&quot;,
            &quot;clang&quot;: &quot;clang&quot;,
            &quot;intelmpi&quot;: &quot;intelmpi&quot;,
            &quot;cmake&quot;: &quot;cmake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;GCC&quot;,
            &quot;clang&quot;: &quot;Clang&quot;,
            &quot;Classic-Flang&quot;: &quot;Classic-Flang&quot;,
            &quot;intel&quot;: &quot;intel&quot;,
            &quot;intelmpi&quot;: &quot;iimpi&quot;,
            &quot;gompi&quot;: &quot;gompi&quot;,
            &quot;openmpi&quot; : &quot;openmpi&quot;,
            &quot;mpich&quot; : &quot;mpich&quot;,
            &quot;cmake&quot; : &quot;CMake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames" type="string" separator=";" duplicate="none" mode="python">
        <value>{key:value for (key, value) in list(${modulenames_defaults}.items()) + list(${modulenames_updated}.items())}</value>
        <selection>{'gcc': 'GCC', 'clang': 'Clang', 'intelmpi': 'iimpi', 'cmake': 'CMake', 'Classic-Flang': 'Classic-Flang', 'intel': 'intel', 'gompi': 'gompi', 'openmpi': 'openmpi', 'mpich': 'mpich'}</selection>
      </parameter>
      <parameter name="modules" type="string" separator=";" duplicate="none" mode="python">
        <value>{
              &quot;gcc&quot;:                &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;gcc/8.3.0&quot;:          &quot;{0[gcc]}/8.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.3.0&quot;:          &quot;{0[gcc]}/9.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.4.0&quot;:          &quot;{0[gcc]}/9.4.0&quot;.format(${modulenames}),
              &quot;gcc/10.2.0&quot;:         &quot;{0[gcc]}/10.2.0&quot;.format(${modulenames}),
              &quot;gcc/10.3.0&quot;:         &quot;{0[gcc]}/10.3.0&quot;.format(${modulenames}),
              &quot;gcc/11.2.0&quot;:         &quot;{0[gcc]}/11.2.0&quot;.format(${modulenames}),
              &quot;gcc/11.3.0&quot;:         &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;clang&quot;:              &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/13.0.1&quot;:       &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/15.0.5&quot;:       &quot;{0[clang]}/15.0.5&quot;.format(${modulenames}),
              &quot;clang/16.0.6&quot;:       &quot;{0[clang]}/16.0.6&quot;.format(${modulenames}),
              &quot;Classic-Flang&quot;:      &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;Classic-Flang/16.0.4-c23&quot;:  &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;intel&quot;       :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2019b&quot; :       &quot;{0[intel]}/2019b&quot;.format(${modulenames}),
              &quot;intel/2020a&quot; :       &quot;{0[intel]}/2020a&quot;.format(${modulenames}),
              &quot;intel/2020b&quot; :       &quot;{0[intel]}/2020b&quot;.format(${modulenames}),
              &quot;intel/2021a&quot; :       &quot;{0[intel]}/2021a&quot;.format(${modulenames}),
              &quot;intel/2021b&quot; :       &quot;{0[intel]}/2021b&quot;.format(${modulenames}),
              &quot;intel/2022a&quot; :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2022b&quot; :       &quot;{0[intel]}/2022b&quot;.format(${modulenames}),
              &quot;intel/2023a&quot; :       &quot;{0[intel]}/2023a&quot;.format(${modulenames}),
              &quot;gompi/2020a&quot; :       &quot;{0[gompi]}/2020a&quot;.format(${modulenames}),
              &quot;gompi/2020b&quot; :       &quot;{0[gompi]}/2020b&quot;.format(${modulenames}),
              &quot;gompi/2021a&quot; :       &quot;{0[gompi]}/2021a&quot;.format(${modulenames}),
              &quot;gompi/2021b&quot; :       &quot;{0[gompi]}/2021b&quot;.format(${modulenames}),
              &quot;gompi/2022a&quot; :       &quot;{0[gompi]}/2022a&quot;.format(${modulenames}),
              &quot;gompi/2022b&quot; :       &quot;{0[gompi]}/2022b&quot;.format(${modulenames}),
              &quot;gompi/2023a&quot; :       &quot;{0[gompi]}/2023a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022b&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2023a&quot;.format(${modulenames}),
              &quot;openmpi&quot;:            &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.0.3&quot;:      &quot;{0[openmpi]}/4.0.3&quot;.format(${modulenames}),
              &quot;openmpi/4.0.5&quot;:      &quot;{0[openmpi]}/4.0.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.1&quot;:      &quot;{0[openmpi]}/4.1.1&quot;.format(${modulenames}),
              &quot;openmpi/4.1.4&quot;:      &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.1.5&quot;:      &quot;{0[openmpi]}/4.1.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6&quot;:      &quot;{0[openmpi]}/4.1.6&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6-ucx16&quot;:      &quot;{0[openmpi]}/4.1.6-ucx16&quot;.format(${modulenames}),
              &quot;mpich&quot;:              &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;mpich/4.1.2&quot;:        &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;cmake&quot;:               &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.21.1&quot;:        &quot;{0[cmake]}/3.21.1&quot;.format(${modulenames}),
              &quot;cmake/3.22.1&quot;:        &quot;{0[cmake]}/3.22.1&quot;.format(${modulenames}),
              &quot;cmake/3.23.1&quot;:        &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.24.3&quot;:        &quot;{0[cmake]}/3.24.3&quot;.format(${modulenames}),
              &quot;cmake/3.26.3&quot;:        &quot;{0[cmake]}/3.26.3&quot;.format(${modulenames})    
          }</value>
        <selection>{'gcc': 'GCC/11.3.0', 'gcc/8.3.0': 'GCC/8.3.0', 'gcc/9.3.0': 'GCC/9.3.0', 'gcc/9.4.0': 'GCC/9.4.0', 'gcc/10.2.0': 'GCC/10.2.0', 'gcc/10.3.0': 'GCC/10.3.0', 'gcc/11.2.0': 'GCC/11.2.0', 'gcc/11.3.0': 'GCC/11.3.0', 'clang': 'Clang/13.0.1', 'clang/13.0.1': 'Clang/13.0.1', 'clang/15.0.5': 'Clang/15.0.5', 'clang/16.0.6': 'Clang/16.0.6', 'Classic-Flang': 'Classic-Flang/16.0.4-c23', 'Classic-Flang/16.0.4-c23': 'Classic-Flang/16.0.4-c23', 'intel': 'intel/2022a', 'intel/2019b': 'intel/2019b', 'intel/2020a': 'intel/2020a', 'intel/2020b': 'intel/2020b', 'intel/2021a': 'intel/2021a', 'intel/2021b': 'intel/2021b', 'intel/2022a': 'intel/2022a', 'intel/2022b': 'intel/2022b', 'intel/2023a': 'intel/2023a', 'gompi/2020a': 'gompi/2020a', 'gompi/2020b': 'gompi/2020b', 'gompi/2021a': 'gompi/2021a', 'gompi/2021b': 'gompi/2021b', 'gompi/2022a': 'gompi/2022a', 'gompi/2022b': 'gompi/2022b', 'gompi/2023a': 'gompi/2023a', 'intelmpi': 'iimpi/2023a', 'openmpi': 'openmpi/4.1.4', 'openmpi/4.0.3': 'openmpi/4.0.3', 'openmpi/4.0.5': 'openmpi/4.0.5', 'openmpi/4.1.1': 'openmpi/4.1.1', 'openmpi/4.1.4': 'openmpi/4.1.4', 'openmpi/4.1.5': 'openmpi/4.1.5', 'openmpi/4.1.6': 'openmpi/4.1.6', 'openmpi/4.1.6-ucx16': 'openmpi/4.1.6-ucx16', 'mpich': 'mpich/4.1.2', 'mpich/4.1.2': 'mpich/4.1.2', 'cmake': 'CMake/3.23.1', 'cmake/3.21.1': 'CMake/3.21.1', 'cmake/3.22.1': 'CMake/3.22.1', 'cmake/3.23.1': 'CMake/3.23.1', 'cmake/3.24.3': 'CMake/3.24.3', 'cmake/3.26.3': 'CMake/3.26.3'}</selection>
      </parameter>
      <parameter name="prerequisite_modules_dict" type="string" separator=";" duplicate="none" mode="python">
        <value>{
            &quot;clang/13.0.1&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/15.0.5&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/16.0.6&quot;:       [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;Classic-Flang/16.0.4-c23&quot;:  [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;intelmpi/2021.6.0&quot;:  [&quot;intel-compilers/2022.1.0&quot;],
            &quot;openmpi/4.0.3&quot;:      [&quot;GCC/9.3.0&quot;],
            &quot;openmpi/4.0.5&quot;:      [&quot;GCC/10.2.0&quot;],
            &quot;openmpi/4.1.1&quot;:      [&quot;GCC/11.2.0&quot;],
            &quot;openmpi/4.1.4&quot;:      [&quot;GCC/11.3.0&quot;],
            &quot;openmpi/4.1.5&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6-ucx16&quot;:      [&quot;GCC/12.3.0&quot;],
        }</value>
        <selection>{'clang/13.0.1': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/15.0.5': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/16.0.6': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'Classic-Flang/16.0.4-c23': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'intelmpi/2021.6.0': ['intel-compilers/2022.1.0'], 'openmpi/4.0.3': ['GCC/9.3.0'], 'openmpi/4.0.5': ['GCC/10.2.0'], 'openmpi/4.1.1': ['GCC/11.2.0'], 'openmpi/4.1.4': ['GCC/11.3.0'], 'openmpi/4.1.5': ['GCC/12.3.0'], 'openmpi/4.1.6': ['GCC/12.3.0'], 'openmpi/4.1.6-ucx16': ['GCC/12.3.0']}</selection>
      </parameter>
      <parameter name="cmake_version" type="string" separator="," duplicate="none" mode="text">
        <value>3.26.3</value>
      </parameter>
      <parameter name="cmake_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;cmake/${cmake_version}&quot;) if $modules.get(&quot;cmake/${cmake_version}&quot;) else $modules.get(&quot;cmake&quot;, &quot;cmake/${cmake_version}&quot;)</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="prerequisite_toolchain_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__toolchain_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_compiler_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__compiler_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_mpi_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__mpi_module&quot;, &quot; &quot;))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="prerequisite_modules" type="string" separator="," duplicate="none" mode="text">
        <value>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2</value>
      </parameter>
      <parameter name="toolchain_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${toolchain_name}/${toolchain_version}&quot;, $modules.get(&quot;${toolchain_name}&quot;, &quot;${toolchain_name}&quot; + (&quot;/${toolchain_version}&quot; if &quot;${toolchain_version}&quot; else &quot;&quot;)))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="compiler_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${compiler_name}/${compiler_version}&quot;, $modules.get(&quot;${compiler_name}&quot;, &quot;${compiler_name}&quot; + (&quot;/${compiler_version}&quot; if &quot;${compiler_version}&quot; else &quot;&quot;)))</value>
        <selection>Classic-Flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="mpi_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${mpi_name}/${mpi_version}&quot;, $modules.get(&quot;${mpi_name}&quot;, &quot;${mpi_name}&quot; + (&quot;/${mpi_version}&quot; if &quot;${mpi_version}&quot; else &quot;&quot;)))</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="required_modules" type="string" separator="," duplicate="none" mode="text">
        <value>${prerequisite_modules} ${toolchain_module} ${mpi_module} ${compiler_module} ${cmake_module} ${must_prerequisite_modules}</value>
        <selection>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3</selection>
      </parameter>
      <parameter name="use_modules" type="string" separator="," duplicate="none" mode="text">
        <value>/home/rwth1269/modules</value>
      </parameter>
      <parameter name="load_modules" type="string" separator="," duplicate="none" mode="text">
        <value>module use /home/rwth1269/modules/; module purge; for path in ${use_modules}; do module use $path; done; for modulename in ${required_modules}; do module load $modulename; done</value>
        <selection>module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done</selection>
      </parameter>
      <parameter name="__toolchain_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${toolchain_module}&quot;.lower()</value>
        <selection>gcc/12.3.0</selection>
      </parameter>
      <parameter name="__compiler_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${compiler_module}&quot;.lower()</value>
        <selection>classic-flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="__mpi_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${mpi_module}&quot;.lower()</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="CMAKE_BUILD_TYPE" type="string" separator="," duplicate="none" mode="text">
        <value>RelWithDebInfo</value>
      </parameter>
      <parameter name="MPI_C_COMPILER" type="string" separator="," duplicate="none" mode="text">
        <value>mpicc</value>
      </parameter>
      <parameter name="MPI_CXX_COMPILER" type="string" separator="," duplicate="none" mode="text">
        <value>mpicxx</value>
      </parameter>
      <parameter name="MPI_Fortran_COMPILER" type="string" separator="," duplicate="none" mode="text">
        <value>mpif90</value>
      </parameter>
      <parameter name="ENABLE_FORTRAN" type="string" separator="," duplicate="none" mode="text">
        <value>ON</value>
      </parameter>
      <parameter name="ENABLE_TSAN" type="string" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="ENABLE_TYPEART" type="string" separator="," duplicate="none" mode="text">
        <value>OFF</value>
      </parameter>
      <parameter name="ENABLE_TESTS" type="string" separator="," duplicate="none" mode="text">
        <value>OFF</value>
      </parameter>
      <parameter name="ENABLE_OPENSHMEM" type="string" separator="," duplicate="none" mode="text">
        <value>ON</value>
      </parameter>
      <parameter name="ENABLE_GASPI" type="string" separator="," duplicate="none" mode="text">
        <value>ON</value>
      </parameter>
      <parameter name="GTI_DEBUG" type="string" separator="," duplicate="none" mode="text">
        <value>False</value>
      </parameter>
      <parameter name="USE_BACKWARD" type="string" separator="," duplicate="none" mode="text">
        <value>OFF</value>
      </parameter>
      <parameter name="MUST_build_args" type="string" separator="," duplicate="none" mode="text">
        <value>-DMPI_C_COMPILER=${MPI_C_COMPILER} \
      -DMPI_CXX_COMPILER=${MPI_CXX_COMPILER} \
      -DCMAKE_Fortran_COMPILER=${MPI_Fortran_COMPILER} \
      -DCMAKE_INSTALL_PREFIX=&quot;${must_install_folder}&quot; \
      -DENABLE_FORTRAN=${ENABLE_FORTRAN} \
      -DENABLE_TSAN=${ENABLE_TSAN} \
      -DENABLE_TYPEART=${ENABLE_TYPEART} \
      -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
      -DENABLE_TESTS=${ENABLE_TESTS} \
      -DGTI_DEBUG=${GTI_DEBUG} \
      -DUSE_BACKWARD=${USE_BACKWARD} \
      -DENABLE_OPENSHMEM=${ENABLE_OPENSHMEM} \
      -DENABLE_GASPI=${ENABLE_GASPI}</value>
        <selection>-DMPI_C_COMPILER=mpicc \
      -DMPI_CXX_COMPILER=mpicxx \
      -DCMAKE_Fortran_COMPILER=mpif90 \
      -DCMAKE_INSTALL_PREFIX=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install&quot; \
      -DENABLE_FORTRAN=ON \
      -DENABLE_TSAN=1 \
      -DENABLE_TYPEART=OFF \
      -DCMAKE_BUILD_TYPE=RelWithDebInfo \
      -DENABLE_TESTS=OFF \
      -DGTI_DEBUG=False \
      -DUSE_BACKWARD=OFF \
      -DENABLE_OPENSHMEM=ON \
      -DENABLE_GASPI=ON</selection>
      </parameter>
      <parameter name="must_git_clone_ssh" type="string" separator="," duplicate="none" mode="text">
        <value>git@git-ce.rwth-aachen.de:hpc-research/correctness/MUST.git</value>
      </parameter>
      <parameter name="must_git_branch" type="string" separator="," duplicate="none" mode="text">
        <value>rmasanitizer</value>
      </parameter>
      <parameter name="__must_commit" type="string" separator="," duplicate="none" mode="shell">
        <value>if [[ $(echo &quot;${must_commit}&quot; | tr '[:upper:]' '[:lower:]') != &quot;head&quot; ]]; then echo ${must_commit}| awk '{printf $1}'; else git ls-remote ${must_git_clone_ssh} ${must_git_branch} | awk '{printf $1}'; fi</value>
        <selection>7b9b5aba5f565b3974d7f4fa82f80336b4e75427</selection>
      </parameter>
      <parameter name="export_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{
              (&quot;clang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;, &quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;clang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;],
              (&quot;Classic-Flang&quot;, &quot;mpich&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;Classic-Flang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
          }</value>
      </parameter>
      <parameter name="compiler_mpi_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${mpi_name}&quot;), []))</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m</selection>
      </parameter>
      <parameter name="compiler_toolchain_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${toolchain_name}&quot;), []))</value>
        <selection/>
      </parameter>
      <parameter name="required_exports" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${compiler_mpi_export} ${compiler_toolchain_export} ${openmp_export} ${must_export}</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${required_exports}; do export &quot;$item&quot;; done</value>
        <selection>for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
    </parameterset>
    <iteration_siblings>0</iteration_siblings>
    <environment/>
  </workpackage>
  <workpackage id="1">
    <step iteration="0" cycle="0">copy_source</step>
    <parameterset>
      <parameter name="path_to_source" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/npb</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/npb</selection>
      </parameter>
      <parameter name="ERROR_path_to_source_Empty" type="string" separator="," duplicate="none" mode="python">
        <value>exit(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name}\033[0m:\n'+
        '        path_to_source needs to be non-empty\n'+
        '        make sure to set the path in the parameterset &quot;source&quot; in ${jube_benchmark_home}.xml\n'+
        '        i.e. \n'+
        '        &lt;parameterset name=&quot;source&quot;  init_with=&quot;defaults.xml&quot;&gt;\n'+
        '          \033[93m&lt;parameter name=&quot;path_to_source&quot; type=&quot;string&quot;&gt; \033[1m&lt;PATH TO SOURCE&gt;\033[0m\033[93m &lt;/parameter&gt; &lt;--------------\033[0m\n'+
        '        &lt;/parameterset&gt;'
        ) if '${path_to_source}'=='' else 'OK'</value>
        <selection>OK</selection>
      </parameter>
    </parameterset>
    <parents>0</parents>
    <iteration_siblings>1</iteration_siblings>
    <environment/>
  </workpackage>
  <workpackage id="2">
    <step iteration="0" cycle="0">compile</step>
    <parameterset>
      <parameter name="toolchain_name" type="string" separator="," duplicate="none" mode="text">
        <value>GCC</value>
      </parameter>
      <parameter name="toolchain_version" type="string" separator="," duplicate="none" mode="text">
        <value>12.3.0</value>
      </parameter>
      <parameter name="compiler_name" type="string" separator="," duplicate="none" mode="text">
        <value>Classic-Flang</value>
      </parameter>
      <parameter name="compiler_version" type="string" separator="," duplicate="none" mode="text">
        <value>16.0.4-c23</value>
      </parameter>
      <parameter name="mpi_name" type="string" separator="," duplicate="none" mode="text">
        <value>openmpi</value>
      </parameter>
      <parameter name="mpi_version" type="string" separator="," duplicate="none" mode="text">
        <value>4.1.6</value>
      </parameter>
      <parameter name="compile_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,tsan,tsan-opt</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="modulenames_defaults" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;gcc&quot;,
            &quot;clang&quot;: &quot;clang&quot;,
            &quot;intelmpi&quot;: &quot;intelmpi&quot;,
            &quot;cmake&quot;: &quot;cmake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;GCC&quot;,
            &quot;clang&quot;: &quot;Clang&quot;,
            &quot;Classic-Flang&quot;: &quot;Classic-Flang&quot;,
            &quot;intel&quot;: &quot;intel&quot;,
            &quot;intelmpi&quot;: &quot;iimpi&quot;,
            &quot;gompi&quot;: &quot;gompi&quot;,
            &quot;openmpi&quot; : &quot;openmpi&quot;,
            &quot;mpich&quot; : &quot;mpich&quot;,
            &quot;cmake&quot; : &quot;CMake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames" type="string" separator=";" duplicate="none" mode="python">
        <value>{key:value for (key, value) in list(${modulenames_defaults}.items()) + list(${modulenames_updated}.items())}</value>
        <selection>{'gcc': 'GCC', 'clang': 'Clang', 'intelmpi': 'iimpi', 'cmake': 'CMake', 'Classic-Flang': 'Classic-Flang', 'intel': 'intel', 'gompi': 'gompi', 'openmpi': 'openmpi', 'mpich': 'mpich'}</selection>
      </parameter>
      <parameter name="modules" type="string" separator=";" duplicate="none" mode="python">
        <value>{
              &quot;gcc&quot;:                &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;gcc/8.3.0&quot;:          &quot;{0[gcc]}/8.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.3.0&quot;:          &quot;{0[gcc]}/9.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.4.0&quot;:          &quot;{0[gcc]}/9.4.0&quot;.format(${modulenames}),
              &quot;gcc/10.2.0&quot;:         &quot;{0[gcc]}/10.2.0&quot;.format(${modulenames}),
              &quot;gcc/10.3.0&quot;:         &quot;{0[gcc]}/10.3.0&quot;.format(${modulenames}),
              &quot;gcc/11.2.0&quot;:         &quot;{0[gcc]}/11.2.0&quot;.format(${modulenames}),
              &quot;gcc/11.3.0&quot;:         &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;clang&quot;:              &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/13.0.1&quot;:       &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/15.0.5&quot;:       &quot;{0[clang]}/15.0.5&quot;.format(${modulenames}),
              &quot;clang/16.0.6&quot;:       &quot;{0[clang]}/16.0.6&quot;.format(${modulenames}),
              &quot;Classic-Flang&quot;:      &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;Classic-Flang/16.0.4-c23&quot;:  &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;intel&quot;       :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2019b&quot; :       &quot;{0[intel]}/2019b&quot;.format(${modulenames}),
              &quot;intel/2020a&quot; :       &quot;{0[intel]}/2020a&quot;.format(${modulenames}),
              &quot;intel/2020b&quot; :       &quot;{0[intel]}/2020b&quot;.format(${modulenames}),
              &quot;intel/2021a&quot; :       &quot;{0[intel]}/2021a&quot;.format(${modulenames}),
              &quot;intel/2021b&quot; :       &quot;{0[intel]}/2021b&quot;.format(${modulenames}),
              &quot;intel/2022a&quot; :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2022b&quot; :       &quot;{0[intel]}/2022b&quot;.format(${modulenames}),
              &quot;intel/2023a&quot; :       &quot;{0[intel]}/2023a&quot;.format(${modulenames}),
              &quot;gompi/2020a&quot; :       &quot;{0[gompi]}/2020a&quot;.format(${modulenames}),
              &quot;gompi/2020b&quot; :       &quot;{0[gompi]}/2020b&quot;.format(${modulenames}),
              &quot;gompi/2021a&quot; :       &quot;{0[gompi]}/2021a&quot;.format(${modulenames}),
              &quot;gompi/2021b&quot; :       &quot;{0[gompi]}/2021b&quot;.format(${modulenames}),
              &quot;gompi/2022a&quot; :       &quot;{0[gompi]}/2022a&quot;.format(${modulenames}),
              &quot;gompi/2022b&quot; :       &quot;{0[gompi]}/2022b&quot;.format(${modulenames}),
              &quot;gompi/2023a&quot; :       &quot;{0[gompi]}/2023a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022b&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2023a&quot;.format(${modulenames}),
              &quot;openmpi&quot;:            &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.0.3&quot;:      &quot;{0[openmpi]}/4.0.3&quot;.format(${modulenames}),
              &quot;openmpi/4.0.5&quot;:      &quot;{0[openmpi]}/4.0.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.1&quot;:      &quot;{0[openmpi]}/4.1.1&quot;.format(${modulenames}),
              &quot;openmpi/4.1.4&quot;:      &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.1.5&quot;:      &quot;{0[openmpi]}/4.1.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6&quot;:      &quot;{0[openmpi]}/4.1.6&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6-ucx16&quot;:      &quot;{0[openmpi]}/4.1.6-ucx16&quot;.format(${modulenames}),
              &quot;mpich&quot;:              &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;mpich/4.1.2&quot;:        &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;cmake&quot;:               &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.21.1&quot;:        &quot;{0[cmake]}/3.21.1&quot;.format(${modulenames}),
              &quot;cmake/3.22.1&quot;:        &quot;{0[cmake]}/3.22.1&quot;.format(${modulenames}),
              &quot;cmake/3.23.1&quot;:        &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.24.3&quot;:        &quot;{0[cmake]}/3.24.3&quot;.format(${modulenames}),
              &quot;cmake/3.26.3&quot;:        &quot;{0[cmake]}/3.26.3&quot;.format(${modulenames})    
          }</value>
        <selection>{'gcc': 'GCC/11.3.0', 'gcc/8.3.0': 'GCC/8.3.0', 'gcc/9.3.0': 'GCC/9.3.0', 'gcc/9.4.0': 'GCC/9.4.0', 'gcc/10.2.0': 'GCC/10.2.0', 'gcc/10.3.0': 'GCC/10.3.0', 'gcc/11.2.0': 'GCC/11.2.0', 'gcc/11.3.0': 'GCC/11.3.0', 'clang': 'Clang/13.0.1', 'clang/13.0.1': 'Clang/13.0.1', 'clang/15.0.5': 'Clang/15.0.5', 'clang/16.0.6': 'Clang/16.0.6', 'Classic-Flang': 'Classic-Flang/16.0.4-c23', 'Classic-Flang/16.0.4-c23': 'Classic-Flang/16.0.4-c23', 'intel': 'intel/2022a', 'intel/2019b': 'intel/2019b', 'intel/2020a': 'intel/2020a', 'intel/2020b': 'intel/2020b', 'intel/2021a': 'intel/2021a', 'intel/2021b': 'intel/2021b', 'intel/2022a': 'intel/2022a', 'intel/2022b': 'intel/2022b', 'intel/2023a': 'intel/2023a', 'gompi/2020a': 'gompi/2020a', 'gompi/2020b': 'gompi/2020b', 'gompi/2021a': 'gompi/2021a', 'gompi/2021b': 'gompi/2021b', 'gompi/2022a': 'gompi/2022a', 'gompi/2022b': 'gompi/2022b', 'gompi/2023a': 'gompi/2023a', 'intelmpi': 'iimpi/2023a', 'openmpi': 'openmpi/4.1.4', 'openmpi/4.0.3': 'openmpi/4.0.3', 'openmpi/4.0.5': 'openmpi/4.0.5', 'openmpi/4.1.1': 'openmpi/4.1.1', 'openmpi/4.1.4': 'openmpi/4.1.4', 'openmpi/4.1.5': 'openmpi/4.1.5', 'openmpi/4.1.6': 'openmpi/4.1.6', 'openmpi/4.1.6-ucx16': 'openmpi/4.1.6-ucx16', 'mpich': 'mpich/4.1.2', 'mpich/4.1.2': 'mpich/4.1.2', 'cmake': 'CMake/3.23.1', 'cmake/3.21.1': 'CMake/3.21.1', 'cmake/3.22.1': 'CMake/3.22.1', 'cmake/3.23.1': 'CMake/3.23.1', 'cmake/3.24.3': 'CMake/3.24.3', 'cmake/3.26.3': 'CMake/3.26.3'}</selection>
      </parameter>
      <parameter name="prerequisite_modules_dict" type="string" separator=";" duplicate="none" mode="python">
        <value>{
            &quot;clang/13.0.1&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/15.0.5&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/16.0.6&quot;:       [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;Classic-Flang/16.0.4-c23&quot;:  [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;intelmpi/2021.6.0&quot;:  [&quot;intel-compilers/2022.1.0&quot;],
            &quot;openmpi/4.0.3&quot;:      [&quot;GCC/9.3.0&quot;],
            &quot;openmpi/4.0.5&quot;:      [&quot;GCC/10.2.0&quot;],
            &quot;openmpi/4.1.1&quot;:      [&quot;GCC/11.2.0&quot;],
            &quot;openmpi/4.1.4&quot;:      [&quot;GCC/11.3.0&quot;],
            &quot;openmpi/4.1.5&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6-ucx16&quot;:      [&quot;GCC/12.3.0&quot;],
        }</value>
        <selection>{'clang/13.0.1': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/15.0.5': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/16.0.6': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'Classic-Flang/16.0.4-c23': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'intelmpi/2021.6.0': ['intel-compilers/2022.1.0'], 'openmpi/4.0.3': ['GCC/9.3.0'], 'openmpi/4.0.5': ['GCC/10.2.0'], 'openmpi/4.1.1': ['GCC/11.2.0'], 'openmpi/4.1.4': ['GCC/11.3.0'], 'openmpi/4.1.5': ['GCC/12.3.0'], 'openmpi/4.1.6': ['GCC/12.3.0'], 'openmpi/4.1.6-ucx16': ['GCC/12.3.0']}</selection>
      </parameter>
      <parameter name="cmake_version" type="string" separator="," duplicate="none" mode="text">
        <value>3.26.3</value>
      </parameter>
      <parameter name="cmake_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;cmake/${cmake_version}&quot;) if $modules.get(&quot;cmake/${cmake_version}&quot;) else $modules.get(&quot;cmake&quot;, &quot;cmake/${cmake_version}&quot;)</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="prerequisite_toolchain_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__toolchain_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_compiler_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__compiler_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_mpi_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__mpi_module&quot;, &quot; &quot;))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="prerequisite_modules" type="string" separator="," duplicate="none" mode="text">
        <value>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2</value>
      </parameter>
      <parameter name="toolchain_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${toolchain_name}/${toolchain_version}&quot;, $modules.get(&quot;${toolchain_name}&quot;, &quot;${toolchain_name}&quot; + (&quot;/${toolchain_version}&quot; if &quot;${toolchain_version}&quot; else &quot;&quot;)))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="compiler_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${compiler_name}/${compiler_version}&quot;, $modules.get(&quot;${compiler_name}&quot;, &quot;${compiler_name}&quot; + (&quot;/${compiler_version}&quot; if &quot;${compiler_version}&quot; else &quot;&quot;)))</value>
        <selection>Classic-Flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="mpi_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${mpi_name}/${mpi_version}&quot;, $modules.get(&quot;${mpi_name}&quot;, &quot;${mpi_name}&quot; + (&quot;/${mpi_version}&quot; if &quot;${mpi_version}&quot; else &quot;&quot;)))</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="required_modules" type="string" separator="," duplicate="none" mode="text">
        <value>${prerequisite_modules} ${toolchain_module} ${mpi_module} ${compiler_module} ${cmake_module} ${must_prerequisite_modules}</value>
        <selection>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3</selection>
      </parameter>
      <parameter name="use_modules" type="string" separator="," duplicate="none" mode="text">
        <value>/home/rwth1269/modules</value>
      </parameter>
      <parameter name="load_modules" type="string" separator="," duplicate="none" mode="text">
        <value>module use /home/rwth1269/modules/; module purge; for path in ${use_modules}; do module use $path; done; for modulename in ${required_modules}; do module load $modulename; done</value>
        <selection>module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done</selection>
      </parameter>
      <parameter name="__toolchain_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${toolchain_module}&quot;.lower()</value>
        <selection>gcc/12.3.0</selection>
      </parameter>
      <parameter name="__compiler_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${compiler_module}&quot;.lower()</value>
        <selection>classic-flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="__mpi_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${mpi_module}&quot;.lower()</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="force_compilation" type="string" separator="," duplicate="none" mode="text">
        <value>true</value>
      </parameter>
      <parameter name="executable_full_name" type="string" separator="," duplicate="none" mode="text">
        <value>${executable_name}${executable_extension}</value>
        <selection>bt-rma.D.x</selection>
      </parameter>
      <parameter name="compile_preparation" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_flags" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
         &quot;tsan&quot;: &quot;${must_stats_compile_flags} -g&quot;,
         &quot;tsan-opt&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags} -g --optimizations ${must_compile_opt}&quot;,
         &quot;isl&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags}&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="tsan_opt_extension" type="string" separator="," duplicate="none" mode="text">
        <value>.tsan-opt.${__tsan_opt_hash}</value>
        <selection>.tsan-opt.a3ee41195bbb95b762933c3809053432</selection>
      </parameter>
      <parameter name="executable_extension" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
        &quot;tsan&quot;: &quot;.tsan&quot;,
        &quot;tsan-opt&quot;: &quot;${tsan_opt_extension}&quot;,
        &quot;isl&quot;: &quot;.isl&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="compile_target" type="string" separator="," duplicate="none" mode="text">
        <value>bt-rma</value>
      </parameter>
      <parameter name="benchmark_build_dir" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${jube_benchmark_home}/executables/${__toolchain_module}/${__compiler_module}/${__mpi_module}/&quot; + (&quot;${RMA_target}&quot; if &quot;${RMA_target}&quot;.split() else &quot;Default&quot;)</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/executables/gcc/12.3.0/classic-flang/16.0.4-c23/openmpi/4.1.6/Default</selection>
      </parameter>
      <parameter name="do_compile" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_compilation} || [ ! -f &quot;${benchmark_build_dir}/${executable_full_name}&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="compile_common_env_vars" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;:     &quot;MPICC='mpicc ${compile_flags}' MPICXX='mpicxx ${compile_flags}' MPIFC='mpifc ${compile_flags}'&quot;,
         &quot;tsan&quot;:     &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;tsan-opt&quot;: &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;isl&quot;:      &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;}.get(&quot;${compile_mode}&quot;, '')</value>
        <selection>MPICC='mpicc ' MPICXX='mpicxx ' MPIFC='mpifc '</selection>
      </parameter>
      <parameter name="compile_env_vars" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${compile_common_env_vars} ${compile_env_vars}; do export &quot;$item&quot;; done</value>
        <selection>for item in MPICC='mpicc ' MPICXX='mpicxx ' MPIFC='mpifc ' ; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="time_output_file" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>${jube_wp_abspath}/time.out</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out</selection>
      </parameter>
      <parameter name="time_measure_command" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="executable_name" type="string" separator="," duplicate="none" mode="text">
        <value>${compile_target}.${CLASS}.x</value>
        <selection>bt-rma.D.x</selection>
      </parameter>
      <parameter name="RMA_target" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="export_flags" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;: 'OMPI_FC=flang MPIFC=&quot;mpif90&quot; FFLAGS=&quot;-g -O3&quot;',
        &quot;tsan&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 ${must_stats_compile_flags}&quot;',
        &quot;tsan-opt&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 --optimizations ${must_compile_opt} -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 --optimizations ${must_compile_opt} ${must_stats_compile_flags}&quot;'}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>OMPI_FC=flang MPIFC=&quot;mpif90&quot; FFLAGS=&quot;-g -O3&quot;</selection>
      </parameter>
      <parameter name="export_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{
              (&quot;clang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;, &quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;clang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;],
              (&quot;Classic-Flang&quot;, &quot;mpich&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;Classic-Flang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
          }</value>
      </parameter>
      <parameter name="compiler_mpi_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${mpi_name}&quot;), []))</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m</selection>
      </parameter>
      <parameter name="compiler_toolchain_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${toolchain_name}&quot;), []))</value>
        <selection/>
      </parameter>
      <parameter name="required_exports" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${compiler_mpi_export} ${compiler_toolchain_export} ${openmp_export} ${must_export}</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${required_exports}; do export &quot;$item&quot;; done</value>
        <selection>for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="must_compile_opt" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;tsan-opt&quot;: &quot;ALX1000,CLUSTER&quot;}.get(&quot;${compile_mode}&quot;, &quot;&quot;)</value>
        <selection/>
      </parameter>
      <parameter name="__tsan_opt_hash" type="string" separator=";" duplicate="none" mode="shell">
        <value>echo -n &quot;$must_compile_opt $__must_hash&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>a3ee41195bbb95b762933c3809053432</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>1</parents>
    <iteration_siblings>2</iteration_siblings>
    <environment>
      <env name="LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:/home/ss540294/opt/lib:/home/ss540294/bin/lib:/home/ss540294/jack/usr/lib64'</env>
      <env name="EBVERSIONXZ">'5.4.2'</env>
      <env name="_ModuleTable017_">'Y3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0MvMTIuMy4wIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wIgosICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5lcnMiCiwg'</env>
      <env name="EBROOTBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENACC">'LWZvcGVuYWNj'</env>
      <env name="EBROOTCLANG">'/work/rwth1269/software/c23/classic-flang'</env>
      <env name="__LMOD_STACK_FLAGS_FREE">'LWZmcmVlLWZvcm0='</env>
      <env name="__LMOD_REF_COUNT_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:1;/work/rwth1269/software/c23/classic-flang/bin:1;/work/rwth1269/software/openmpi/4.1.6/bin:1;/work/rwth1269/software/netcdf/4.9.2/bin:1;/work/rwth1269/software/gpi/1.5.1-ompi/bin:1;/work/rwth1269/software/sos/1.5.2-ompi/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:1;/home/ss540294/software/stress/usr/bin:2;/home/ss540294/software/ccache/bin:2;/home/ss540294/.local/bin:2;/home/ss540294/software/mpiP/bin:2;/home/ss540294/software/git/bin:2;/home/ss540294/htop/bin:2;/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:1;/usr/local_host/bin:1;/usr/local_host/sbin:1;/usr/local_rwth/bin:1;/usr/local_rwth/sbin:1;/usr/bin:1;/usr/sbin:1;/bin:1;/sbin:1;/opt/singularity/bin:1;/usr/local/bin:1;/usr/local/sbin:1;/opt/slurm/current/sbin:1;/opt/slurm/current/bin:1;/home/ss540294/dotfiles/tools/diff-so-fancy:2;/home/ss540294/dotfiles/zsh/plugins/fzf/bin:1'</env>
      <env name="_ModuleTable002_">'MDAwMjYuMDAwMDAwMDAzLip6ZmluYWwiLAp9LApbIkNsYXNzaWMtRmxhbmciXSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9DbGFzc2ljLUZsYW5nLzE2LjAuNC1jMjMubHVhIiwKZnVsbE5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKbG9hZE9yZGVyID0gMTYsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAwLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKd1YgPSAiMDAwMDAwMDE2LjAwMDAwMDAwMC4wMDAwMDAwMDQuKmMuMDAwMDAwMDIzLip6ZmluYWwiLAp9LApHQ0MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBo'</env>
      <env name="FLAGS_FAST_NO_FPOPT">'-O3 -mtune=native'</env>
      <env name="EBVERSIONNUMACTL">'2.0.16'</env>
      <env name="EBROOTGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable019_">'ZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvcmUiCiwgIi93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvQ29udGFpbmVycyIsICIvd29yay9yd3RoMTI2OS9tb2R1bGVzIiwgIi9ob21lL3J3dGgxMjY5L21vZHVsZXMiLCAiL2hvbWUvc3M1NDAyOTQvLm1vZHVsZXMiLCAiL3dvcmsvc3M1NDAyOTQvbW9kdWxlcyIsCn0sCnN5c3RlbUJhc2VNUEFUSCA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlOi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5l'</env>
      <env name="_ModuleTable008_">'eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2JpbnV0aWxzLzIuNDAubHVhIiwKZnVsbE5hbWUgPSAiYmludXRpbHMvMi40MCIsCmxvYWRPcmRlciA9IDksCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiYmludXRpbHMvMi40MCIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwNDAuKnpmaW5hbCIsCn0sCmJ6aXAyID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9iemlwMi8xLjAuOC5sdWEiLApm'</env>
      <env name="FLAGS_GCCcore_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="EBDEVELNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-numactl-2.0.16-easybuild-devel'</env>
      <env name="__LMOD_STACK_F77">'Z2ZvcnRyYW4gLWZuby1zaWduLXplcm8='</env>
      <env name="EBDEVELBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-bzip2-1.0.8-easybuild-devel'</env>
      <env name="GCCcore_ROOT">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="__LMOD_REF_COUNT_XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:1;/work/rwth1269/software/c23/classic-flang/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:1;/usr/local/share:1;/usr/share:1'</env>
      <env name="OBJC">'gcc'</env>
      <env name="EBROOTNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0'</env>
      <env name="_ModuleTable007_">'PSAiMDAwMDAwMDAxLjAwMDAwMDAxNC4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClhaID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9YWi81LjQuMi5sdWEiLApmdWxsTmFtZSA9ICJYWi81LjQuMiIsCmxvYWRPcmRlciA9IDUsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSA0LApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiWFovNS40LjIiLAp3ViA9ICIwMDAwMDAwMDUuMDAwMDAwMDA0LjAwMDAwMDAwMi4qemZpbmFsIiwKfSwKYmludXRpbHMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51'</env>
      <env name="__LMOD_STACK_CC">'Z2Nj'</env>
      <env name="EBROOTCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0'</env>
      <env name="FLAGS_OFFLOAD_OPENMP">'-fopenmp'</env>
      <env name="__LMOD_REF_COUNT_LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1;/home/ss540294/opt/lib:2;/home/ss540294/bin/lib:2;/home/ss540294/jack/usr/lib64:2'</env>
      <env name="__LMOD_REF_COUNT_PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig:1'</env>
      <env name="OBJCXX">'g++'</env>
      <env name="EBROOTGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable015_">'b2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9udW1hY3RsLzIuMC4xNi5sdWEiLApmdWxsTmFtZSA9ICJudW1hY3RsLzIuMC4xNiIsCmxvYWRPcmRlciA9IDMsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAibnVtYWN0bC8yLjAuMTYiLAp3ViA9ICIwMDAwMDAwMDIuMDAwMDAwMDAwLjAwMDAwMDAxNi4qemZpbmFsIiwKfSwKb3Blbm1waSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9vcGVubXBpLzQuMS42Lmx1YSIsCmZ1bGxOYW1lID0gIm9wZW5tcGkvNC4xLjYiLApsb2FkT3JkZXIgPSAxNSwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFt'</env>
      <env name="__LMOD_STACK_FC">'Z2ZvcnRyYW4='</env>
      <env name="_ModuleTable004_">'ZGVyID0gMSwKcHJvcFQgPSB7CnR5cGVfID0gewpjb21waWxlciA9IDEsCn0sCn0sCnN0YWNrRGVwdGggPSAxLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxMi4wMDAwMDAwMDMuKnpmaW5hbCIsCn0sCkdQSSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9HUEkvMS41LjEtb21waS5sdWEiLApmdWxsTmFtZSA9ICJHUEkvMS41LjEtb21waSIsCmxvYWRPcmRlciA9IDEyLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkdQSS8xLjUuMS1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDEuKm9tcGku'</env>
      <env name="EBVERSIONGCC">'12.3.0'</env>
      <env name="EBVERSIONUCX">'1.14.1'</env>
      <env name="EBDEVELXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-XZ-5.4.2-easybuild-devel'</env>
      <env name="EBDEVELHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-hwloc-2.9.1-easybuild-devel'</env>
      <env name="CC">'clang'</env>
      <env name="MPI_BINDIR">'/work/rwth1269/software/openmpi/4.1.6/bin'</env>
      <env name="EBROOTZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_AUTOPAR">'false'</env>
      <env name="EBDEVELLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libxml2-2.11.4-easybuild-devel'</env>
      <env name="__LMOD_STACK_OBJCXX">'Zysr'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1'</env>
      <env name="EBVERSIONHWLOC">'2.9.1'</env>
      <env name="EBVERSIONGCCCORE">'12.3.0'</env>
      <env name="_ModuleTable012_">'c2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlicGNpYWNjZXNzLzAuMTcubHVhIiwKZnVsbE5hbWUgPSAibGlicGNpYWNjZXNzLzAuMTciLApsb2FkT3JkZXIgPSA3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnBjaWFjY2Vzcy8wLjE3IiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxNy4qemZpbmFsIiwKfSwKbGlieG1sMiA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlieG1sMi8yLjExLjQubHVhIiwKZnVs'</env>
      <env name="EBROOTXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0'</env>
      <env name="OMPI_CXX">'clang++'</env>
      <env name="EBROOTLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0'</env>
      <env name="MPICXX">'mpicxx'</env>
      <env name="__LMOD_STACK_FLAGS_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_REF_COUNT_MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:1;/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:5;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:8;/work/ss540294/.local/easybuild/modules/all/Core:16;/work/ss540294/.local/easybuild/modules/all/Containers:16;/work/rwth1269/modules:9;/home/rwth1269/modules:10;/home/ss540294/.modules:11;/work/ss540294/modules:11'</env>
      <env name="EBDEVELLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libarchive-3.6.2-easybuild-devel'</env>
      <env name="EBROOTBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0'</env>
      <env name="CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:/work/rwth1269/software/c23/classic-flang:/work/rwth1269/software/openmpi/4.1.6:/work/rwth1269/software/netcdf/4.9.2:/work/rwth1269/software/gpi/1.5.1-ompi:/work/rwth1269/software/sos/1.5.2-ompi:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="LASTCOMPILER">'GCCcore'</env>
      <env name="EBDEVELUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-UCX-1.14.1-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_RUNTIME_LINKER">'LVdsLC1ycGF0aD0='</env>
      <env name="CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:/work/rwth1269/software/c23/classic-flang/include:/work/rwth1269/software/openmpi/4.1.6/include:/work/rwth1269/software/netcdf/4.9.2/include:/work/rwth1269/software/gpi/1.5.1-ompi/include:/work/rwth1269/software/sos/1.5.2-ompi/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include'</env>
      <env name="__LMOD_STACK_FLAGS_FAST_NO_FPOPT">'LU8zIC1tdHVuZT1uYXRpdmU='</env>
      <env name="F77">'gfortran -fno-sign-zero'</env>
      <env name="EBDEVELCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-cURL-8.0.1-easybuild-devel'</env>
      <env name="EBROOTCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0'</env>
      <env name="XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:/work/rwth1269/software/c23/classic-flang/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:/usr/local/share:/usr/share'</env>
      <env name="OSHCXX">'oshcxx'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="UCX_UD_MLX5_TIMEOUT">'2m'</env>
      <env name="FLAGS_FREE">'-ffree-form'</env>
      <env name="MPI_NAME">'OpenMPI'</env>
      <env name="EBVERSIONLIBPCIACCESS">'0.17'</env>
      <env name="__LMOD_STACK_FLAGS_ARCH64">'LW02NA=='</env>
      <env name="EBROOTLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0'</env>
      <env name="CURL_INCLUDES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include'</env>
      <env name="__LMOD_REF_COUNT_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/home/ss540294/bin/lib:2'</env>
      <env name="FLAGS_OFFLOAD_OPENACC">'-fopenacc'</env>
      <env name="EBVERSIONLIBXML2">'2.11.4'</env>
      <env name="FLAGS_OPENMP">'-fopenmp'</env>
      <env name="LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/home/ss540294/bin/lib'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:1;/work/rwth1269/software/c23/classic-flang:1;/work/rwth1269/software/openmpi/4.1.6:1;/work/rwth1269/software/netcdf/4.9.2:1;/work/rwth1269/software/gpi/1.5.1-ompi:1;/work/rwth1269/software/sos/1.5.2-ompi:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0:1'</env>
      <env name="_ModuleTable010_">'CnVzZXJOYW1lID0gImNVUkwvOC4wLjEiLAp3ViA9ICIwMDAwMDAwMDguMDAwMDAwMDAwLjAwMDAwMDAwMS4qemZpbmFsIiwKfSwKaHdsb2MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2h3bG9jLzIuOS4xLmx1YSIsCmZ1bGxOYW1lID0gImh3bG9jLzIuOS4xIiwKbG9hZE9yZGVyID0gOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJod2xvYy8yLjkuMSIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwMDkuMDAwMDAwMDAxLip6ZmluYWwiLAp9LApsaWJhcmNoaXZl'</env>
      <env name="_ModuleTable001_">'X01vZHVsZVRhYmxlXyA9IHsKTVR2ZXJzaW9uID0gMywKY19yZWJ1aWxkVGltZSA9IGZhbHNlLApjX3Nob3J0VGltZSA9IGZhbHNlLApkZXB0aFQgPSB7fSwKZmFtaWx5ID0ge30sCm1UID0gewpDTWFrZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvQ01ha2UvMy4yNi4zLmx1YSIsCmZ1bGxOYW1lID0gIkNNYWtlLzMuMjYuMyIsCmxvYWRPcmRlciA9IDIxLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkNNYWtlLzMuMjYuMyIsCndWID0gIjAwMDAwMDAwMy4wMDAw'</env>
      <env name="LOADEDMODULES">'GCCcore/.12.3.0:zlib/1.2.13:numactl/2.0.16:UCX/1.14.1:XZ/5.4.2:libxml2/2.11.4:libpciaccess/0.17:hwloc/2.9.1:binutils/2.40:ncurses/6.4:SOS/1.5.2-ompi:GPI/1.5.1-ompi:netcdf/4.9.2:GCC/12.3.0:openmpi/4.1.6:Classic-Flang/16.0.4-c23:bzip2/1.0.8:OpenSSL/1.1:cURL/8.0.1:libarchive/3.6.2:CMake/3.26.3'</env>
      <env name="FC">'flang'</env>
      <env name="__LMOD_REF_COUNT_ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal:1'</env>
      <env name="FLAGS_MPI_BATCH">''</env>
      <env name="__LMOD_REF_COUNT_MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:1;/work/rwth1269/software/c23/classic-flang/share/man:1;/work/rwth1269/software/openmpi/4.1.6/share/man:1;/work/rwth1269/software/netcdf/4.9.2/share/man:1;/work/rwth1269/software/gpi/1.5.1-ompi/share/man:1;/work/rwth1269/software/sos/1.5.2-ompi/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:1;/usr/local_host/man:1;/usr/local_rwth/man:1;/usr/man:1;/usr/share/man:1;/usr/local/man:1;/usr/local/share/man:1;/opt/slurm/current/share/man:1'</env>
      <env name="_ModuleTable006_">'IDExLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIlNPUy8xLjUuMi1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDIuKm9tcGkuKnpmaW5hbCIsCn0sClVDWCA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvVUNYLzEuMTQuMS5sdWEiLApmdWxsTmFtZSA9ICJVQ1gvMS4xNC4xIiwKbG9hZE9yZGVyID0gNCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJVQ1gvMS4xNC4xIiwKd1Yg'</env>
      <env name="__LMOD_STACK_OBJC">'Z2Nj'</env>
      <env name="MPI_INCLUDE">'/work/rwth1269/software/openmpi/4.1.6/include'</env>
      <env name="_ModuleTable003_">'aXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvR0NDLzEyLjMuMC5sdWEiLApmdWxsTmFtZSA9ICJHQ0MvMTIuMy4wIiwKbG9hZE9yZGVyID0gMTQsCnByb3BUID0gewp0eXBlXyA9IHsKdG9vbGNoYWluID0gMSwKfSwKfSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJHQ0MvMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDEyLjAwMDAwMDAwMy4qemZpbmFsIiwKfSwKR0NDY29yZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29yZS9HQ0Njb3JlLy4xMi4zLjAubHVhIiwKZnVsbE5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKbG9hZE9y'</env>
      <env name="MPICC">'mpicc'</env>
      <env name="_ModuleTable013_">'bE5hbWUgPSAibGlieG1sMi8yLjExLjQiLApsb2FkT3JkZXIgPSA2LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnhtbDIvMi4xMS40IiwKd1YgPSAiMDAwMDAwMDAyLjAwMDAwMDAxMS4wMDAwMDAwMDQuKnpmaW5hbCIsCn0sCm5jdXJzZXMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL25jdXJzZXMvNi40Lmx1YSIsCmZ1bGxOYW1lID0gIm5jdXJzZXMvNi40IiwKbG9hZE9yZGVyID0gMTAsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAi'</env>
      <env name="MPIFC">'mpif90'</env>
      <env name="EBDEVELLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libpciaccess-0.17-easybuild-devel'</env>
      <env name="__LMOD_STACK_CPP">'Y3Bw'</env>
      <env name="CXX">'clang++'</env>
      <env name="_ModuleTable016_">'ZSA9ICJvcGVubXBpLzQuMS42IiwKd1YgPSAiMDAwMDAwMDA0LjAwMDAwMDAwMS4wMDAwMDAwMDYuKnpmaW5hbCIsCn0sCnpsaWIgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL3psaWIvMS4yLjEzLmx1YSIsCmZ1bGxOYW1lID0gInpsaWIvMS4yLjEzIiwKbG9hZE9yZGVyID0gMiwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDMsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJ6bGliLzEuMi4xMyIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDIuMDAwMDAwMDEzLip6ZmluYWwiLAp9LAp9LAptcGF0aEEgPSB7CiIv'</env>
      <env name="_ModuleTable009_">'dWxsTmFtZSA9ICJiemlwMi8xLjAuOCIsCmxvYWRPcmRlciA9IDE3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImJ6aXAyLzEuMC44IiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwMC4wMDAwMDAwMDguKnpmaW5hbCIsCn0sCmNVUkwgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2NVUkwvOC4wLjEubHVhIiwKZnVsbE5hbWUgPSAiY1VSTC84LjAuMSIsCmxvYWRPcmRlciA9IDE5LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIs'</env>
      <env name="FLAGS_FAST">'-O3 -ffast-math -mtune=native'</env>
      <env name="EBDEVELGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/easybuild/Core-GCCcore-.12.3.0-easybuild-devel'</env>
      <env name="EBROOTHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable_Sz_">'20'</env>
      <env name="__LMOD_REF_COUNT_CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:1;/work/rwth1269/software/c23/classic-flang/include:1;/work/rwth1269/software/openmpi/4.1.6/include:1;/work/rwth1269/software/netcdf/4.9.2/include:1;/work/rwth1269/software/gpi/1.5.1-ompi/include:1;/work/rwth1269/software/sos/1.5.2-ompi/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include:1'</env>
      <env name="__LMOD_STACK_FLAGS_PIC">'LWZQSUMgLXNoYXJlZA=='</env>
      <env name="EBDEVELNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-ncurses-6.4-easybuild-devel'</env>
      <env name="_ModuleTable018_">'Ii93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvTVBJL2ludGVsLzIwMjIuMS4wL2ltcGkvMjAyMS42LjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9pbnRlbC8yMDIyLjEuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTEuMy4wIgosICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQy8xMi4zLjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwv'</env>
      <env name="OSHCC">'oshcc'</env>
      <env name="OMPI_FC">'flang'</env>
      <env name="EBDEVELBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-binutils-2.40-easybuild-devel'</env>
      <env name="SHLVL">'6'</env>
      <env name="ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal'</env>
      <env name="MPIEXEC">'srun'</env>
      <env name="FFLAGS">'-g -O3'</env>
      <env name="MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:/work/rwth1269/software/c23/classic-flang/share/man:/work/rwth1269/software/openmpi/4.1.6/share/man:/work/rwth1269/software/netcdf/4.9.2/share/man:/work/rwth1269/software/gpi/1.5.1-ompi/share/man:/work/rwth1269/software/sos/1.5.2-ompi/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:/usr/local_host/man:/usr/local_rwth/man:/usr/man:/usr/share/man:/usr/local/man:/usr/local/share/man:/opt/slurm/current/share/man'</env>
      <env name="EBDEVELGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCC/12.3.0/easybuild/Core-GCC-12.3.0-easybuild-devel'</env>
      <env name="MPI_LIBDIR">'/work/rwth1269/software/openmpi/4.1.6/lib'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_STACK_LASTCOMPILER">'R0NDY29yZQ=='</env>
      <env name="FLAGS_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:/work/ss540294/.local/easybuild/modules/all/Core:/work/ss540294/.local/easybuild/modules/all/Containers:/work/rwth1269/modules:/home/rwth1269/modules:/home/ss540294/.modules:/work/ss540294/modules'</env>
      <env name="OMPI_CC">'clang'</env>
      <env name="EBVERSIONBINUTILS">'2.40'</env>
      <env name="EBDEVELZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-zlib-1.2.13-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_FAST">'LU8zIC1mZmFzdC1tYXRoIC1tdHVuZT1uYXRpdmU='</env>
      <env name="PATH">'//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:/work/rwth1269/software/c23/classic-flang/bin:/work/rwth1269/software/openmpi/4.1.6/bin:/work/rwth1269/software/netcdf/4.9.2/bin:/work/rwth1269/software/gpi/1.5.1-ompi/bin:/work/rwth1269/software/sos/1.5.2-ompi/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:/home/ss540294/software/stress/usr/bin:/home/ss540294/software/ccache/bin:/home/ss540294/.local/bin:/home/ss540294/software/mpiP/bin:/home/ss540294/software/git/bin:/home/ss540294/htop/bin:/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:/usr/local_host/bin:/usr/local_host/sbin:/usr/local_rwth/bin:/usr/local_rwth/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/singularity/bin:/usr/local/bin:/usr/local/sbin:/opt/slurm/current/sbin:/opt/slurm/current/bin:/home/ss540294/dotfiles/tools/diff-so-fancy:/home/ss540294/dotfiles/zsh/plugins/fzf/bin'</env>
      <env name="_ModuleTable014_">'YWN0aXZlIiwKdXNlck5hbWUgPSAibmN1cnNlcy82LjQiLAp3ViA9ICIwMDAwMDAwMDYuMDAwMDAwMDA0Lip6ZmluYWwiLAp9LApuZXRjZGYgPSB7CmZuID0gIi9ob21lL3J3dGgxMjY5L21vZHVsZXMvbmV0Y2RmLzQuOS4yLmx1YSIsCmZ1bGxOYW1lID0gIm5ldGNkZi80LjkuMiIsCmxvYWRPcmRlciA9IDEzLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIm5ldGNkZi80LjkuMiIsCndWID0gIjAwMDAwMDAwNC4wMDAwMDAwMDkuMDAwMDAwMDAyLip6ZmluYWwiLAp9LApudW1hY3RsID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9t'</env>
      <env name="_LMFILES_">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCCcore/.12.3.0.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/zlib/1.2.13.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/numactl/2.0.16.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/UCX/1.14.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/XZ/5.4.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libxml2/2.11.4.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libpciaccess/0.17.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/hwloc/2.9.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/binutils/2.40.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/ncurses/6.4.lua:/home/rwth1269/modules/SOS/1.5.2-ompi.lua:/home/rwth1269/modules/GPI/1.5.1-ompi.lua:/home/rwth1269/modules/netcdf/4.9.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCC/12.3.0.lua:/home/rwth1269/modules/openmpi/4.1.6.lua:/home/rwth1269/modules/Classic-Flang/16.0.4-c23.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/bzip2/1.0.8.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/OpenSSL/1.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/cURL/8.0.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libarchive/3.6.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/CMake/3.26.3.lua'</env>
      <env name="EBROOTLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0'</env>
      <env name="PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig'</env>
      <env name="__LMOD_STACK_FLAGS_DEBUG">'LWc='</env>
      <env name="_ModuleTable011_">'ID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9saWJhcmNoaXZlLzMuNi4yLmx1YSIsCmZ1bGxOYW1lID0gImxpYmFyY2hpdmUvMy42LjIiLApsb2FkT3JkZXIgPSAyMCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDEsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJsaWJhcmNoaXZlLzMuNi4yIiwKd1YgPSAiMDAwMDAwMDAzLjAwMDAwMDAwNi4wMDAwMDAwMDIuKnpmaW5hbCIsCn0sCmxpYnBjaWFjY2VzcyA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwv'</env>
      <env name="OMPI_MCA_mtl">'^ofi'</env>
      <env name="EBROOTNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_CXX">'Zysr'</env>
      <env name="CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="__LMOD_STACK_FLAGS_RPATH">'LVdsLC1ycGF0aD0vY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9zb2Z0d2FyZS9HQ0Njb3JlLzEyLjMuMC9saWI2NA=='</env>
      <env name="CPP">'cpp'</env>
      <env name="EBROOTUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable005_">'KnpmaW5hbCIsCn0sCk9wZW5TU0wgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvT3BlblNTTC8xLjEubHVhIiwKZnVsbE5hbWUgPSAiT3BlblNTTC8xLjEiLApsb2FkT3JkZXIgPSAxOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJPcGVuU1NMLzEuMSIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClNPUyA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9TT1MvMS41LjItb21waS5sdWEiLApmdWxsTmFtZSA9ICJTT1MvMS41LjItb21waSIsCmxvYWRPcmRlciA9'</env>
      <env name="EBDEVELCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-CMake-3.26.3-easybuild-devel'</env>
      <env name="_ModuleTable020_">'cnMiLAp9Cg=='</env>
      <env name="LMOD_FAMILY_MPI">'OpenMPI'</env>
      <env name="OMPI_MCA_btl">'^ofi,openib,tcp'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
      <nonenv name="intel_compilers_FC"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI_VERSION"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI"/>
      <nonenv name="__LMOD_STACK_LASTMPI"/>
      <nonenv name="EBVERSIONIMKLMINFFTW"/>
      <nonenv name="I_MPI_PMI_LIBRARY"/>
      <nonenv name="OCL_ICD_FILENAMES"/>
      <nonenv name="LMOD_FAMILY_MPI_VERSION"/>
      <nonenv name="intel_compilers_CC"/>
      <nonenv name="FLAGS_intel_compilers_AUTOPAR"/>
      <nonenv name="FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="EBROOTHTOP"/>
      <nonenv name="EBDEVELSQLITE"/>
      <nonenv name="EBDEVELIMKL"/>
      <nonenv name="EBVERSIONINTELMINCOMPILERS"/>
      <nonenv name="EBROOTIMKL"/>
      <nonenv name="FLAGS_intel_compilers_RPATH"/>
      <nonenv name="__LMOD_REF_COUNT_NLSPATH"/>
      <nonenv name="intel_compilers_ROOT"/>
      <nonenv name="EBROOTLIBFFI"/>
      <nonenv name="__LMOD_REF_COUNT_FI_PROVIDER_PATH"/>
      <nonenv name="FI_PROVIDER_PATH"/>
      <nonenv name="__LMOD_REF_COUNT_PYTHONPATH"/>
      <nonenv name="__LMOD_REF_COUNT_DIAGUTIL_PATH"/>
      <nonenv name="INTEL_PYTHONHOME"/>
      <nonenv name="CLASSPATH"/>
      <nonenv name="FLAGS_intel_compilers_DEBUG"/>
      <nonenv name="FLAGS_intel_compilers_FAST"/>
      <nonenv name="EBDEVELIMPI"/>
      <nonenv name="DAPL_CM_ROUTE_TIMEOUT_MS"/>
      <nonenv name="FPGA_VARS_DIR"/>
      <nonenv name="CMPLR_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_RUNTIME_LINKER"/>
      <nonenv name="EBROOTINTEL"/>
      <nonenv name="__LMOD_STACK_MPICXX"/>
      <nonenv name="EBVERSIONSQLITE"/>
      <nonenv name="FLAGS_intel_compilers_OPENMP"/>
      <nonenv name="EBVERSIONHTOP"/>
      <nonenv name="EBVERSIONLIBFFI"/>
      <nonenv name="EBROOTIMPI"/>
      <nonenv name="FLAGS_intel_compilers_FREE"/>
      <nonenv name="__LMOD_STACK_MPICC"/>
      <nonenv name="EBROOTINTELMINCOMPILERS"/>
      <nonenv name="EBROOTSQLITE"/>
      <nonenv name="R_MPI_ROOT"/>
      <nonenv name="EBROOTLIBREADLINE"/>
      <nonenv name="GDB_INFO"/>
      <nonenv name="INTELFPGAOCLSDKROOT"/>
      <nonenv name="EBDEVELIMKLMINFFTW"/>
      <nonenv name="EBDEVELGMP"/>
      <nonenv name="__LMOD_REF_COUNT_INFOPATH"/>
      <nonenv name="INTELARCH"/>
      <nonenv name="EBDEVELTCL"/>
      <nonenv name="EBDEVELPYTHON"/>
      <nonenv name="EBVERSIONGMP"/>
      <nonenv name="NLSPATH"/>
      <nonenv name="EBVERSIONTCL"/>
      <nonenv name="EBDEVELINTEL"/>
      <nonenv name="EBDEVELHTOP"/>
      <nonenv name="EBEXTSLISTPYTHON"/>
      <nonenv name="_ModuleTable021_"/>
      <nonenv name="EBROOTPYTHON"/>
      <nonenv name="MKL_EXAMPLES"/>
      <nonenv name="DIAGUTIL_PATH"/>
      <nonenv name="EBVERSIONPYTHON"/>
      <nonenv name="EBDEVELINTELMINCOMPILERS"/>
      <nonenv name="EBROOTTCL"/>
      <nonenv name="I_MPI_FABRICS"/>
      <nonenv name="__LMOD_REF_COUNT_FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="__LMOD_STACK_MPIF77"/>
      <nonenv name="I_MPI_OFI_PROVIDER"/>
      <nonenv name="EBDEVELLIBFFI"/>
      <nonenv name="__LMOD_STACK_MPIFC"/>
      <nonenv name="EBVERSIONIMPI"/>
      <nonenv name="LASTMPI"/>
      <nonenv name="I_MPI_JOB_SIGNAL_PROPAGATION"/>
      <nonenv name="FLAGS_intel_compilers_PIC"/>
      <nonenv name="EBROOTGMP"/>
      <nonenv name="FLAGS_intel_compilers_FAST_NO_FPOPT"/>
      <nonenv name="PYTHONPATH"/>
      <nonenv name="MPIF77"/>
      <nonenv name="EBROOTIMKLMINFFTW"/>
      <nonenv name="intel_compilers_F77"/>
      <nonenv name="FLAGS_AUTOPAR"/>
      <nonenv name="EBDEVELLIBREADLINE"/>
      <nonenv name="ONEAPI_ROOT"/>
      <nonenv name="MKLROOT"/>
      <nonenv name="intel_compilers_CXX"/>
      <nonenv name="TBBROOT"/>
      <nonenv name="EBVERSIONINTEL"/>
      <nonenv name="EBVERSIONLIBREADLINE"/>
      <nonenv name="INFOPATH"/>
      <nonenv name="I_MPI_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_ARCH64"/>
      <nonenv name="EBVERSIONIMKL"/>
      <nonenv name="EBDEVELJUBE"/>
      <nonenv name="EBROOTJUBE"/>
      <nonenv name="EBVERSIONJUBE"/>
      <nonenv name="__LMOD_REF_COUNT_JUBE_INCLUDE_PATH"/>
      <nonenv name="JUBE_INCLUDE_PATH"/>
      <nonenv name="_ModuleTable022_"/>
    </environment>
  </workpackage>
  <workpackage id="3">
    <step iteration="0" cycle="0">compile</step>
    <parameterset>
      <parameter name="toolchain_name" type="string" separator="," duplicate="none" mode="text">
        <value>GCC</value>
      </parameter>
      <parameter name="toolchain_version" type="string" separator="," duplicate="none" mode="text">
        <value>12.3.0</value>
      </parameter>
      <parameter name="compiler_name" type="string" separator="," duplicate="none" mode="text">
        <value>Classic-Flang</value>
      </parameter>
      <parameter name="compiler_version" type="string" separator="," duplicate="none" mode="text">
        <value>16.0.4-c23</value>
      </parameter>
      <parameter name="mpi_name" type="string" separator="," duplicate="none" mode="text">
        <value>openmpi</value>
      </parameter>
      <parameter name="mpi_version" type="string" separator="," duplicate="none" mode="text">
        <value>4.1.6</value>
      </parameter>
      <parameter name="compile_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,tsan,tsan-opt</value>
        <selection idx="1">tsan</selection>
      </parameter>
      <parameter name="modulenames_defaults" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;gcc&quot;,
            &quot;clang&quot;: &quot;clang&quot;,
            &quot;intelmpi&quot;: &quot;intelmpi&quot;,
            &quot;cmake&quot;: &quot;cmake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;GCC&quot;,
            &quot;clang&quot;: &quot;Clang&quot;,
            &quot;Classic-Flang&quot;: &quot;Classic-Flang&quot;,
            &quot;intel&quot;: &quot;intel&quot;,
            &quot;intelmpi&quot;: &quot;iimpi&quot;,
            &quot;gompi&quot;: &quot;gompi&quot;,
            &quot;openmpi&quot; : &quot;openmpi&quot;,
            &quot;mpich&quot; : &quot;mpich&quot;,
            &quot;cmake&quot; : &quot;CMake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames" type="string" separator=";" duplicate="none" mode="python">
        <value>{key:value for (key, value) in list(${modulenames_defaults}.items()) + list(${modulenames_updated}.items())}</value>
        <selection>{'gcc': 'GCC', 'clang': 'Clang', 'intelmpi': 'iimpi', 'cmake': 'CMake', 'Classic-Flang': 'Classic-Flang', 'intel': 'intel', 'gompi': 'gompi', 'openmpi': 'openmpi', 'mpich': 'mpich'}</selection>
      </parameter>
      <parameter name="modules" type="string" separator=";" duplicate="none" mode="python">
        <value>{
              &quot;gcc&quot;:                &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;gcc/8.3.0&quot;:          &quot;{0[gcc]}/8.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.3.0&quot;:          &quot;{0[gcc]}/9.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.4.0&quot;:          &quot;{0[gcc]}/9.4.0&quot;.format(${modulenames}),
              &quot;gcc/10.2.0&quot;:         &quot;{0[gcc]}/10.2.0&quot;.format(${modulenames}),
              &quot;gcc/10.3.0&quot;:         &quot;{0[gcc]}/10.3.0&quot;.format(${modulenames}),
              &quot;gcc/11.2.0&quot;:         &quot;{0[gcc]}/11.2.0&quot;.format(${modulenames}),
              &quot;gcc/11.3.0&quot;:         &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;clang&quot;:              &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/13.0.1&quot;:       &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/15.0.5&quot;:       &quot;{0[clang]}/15.0.5&quot;.format(${modulenames}),
              &quot;clang/16.0.6&quot;:       &quot;{0[clang]}/16.0.6&quot;.format(${modulenames}),
              &quot;Classic-Flang&quot;:      &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;Classic-Flang/16.0.4-c23&quot;:  &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;intel&quot;       :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2019b&quot; :       &quot;{0[intel]}/2019b&quot;.format(${modulenames}),
              &quot;intel/2020a&quot; :       &quot;{0[intel]}/2020a&quot;.format(${modulenames}),
              &quot;intel/2020b&quot; :       &quot;{0[intel]}/2020b&quot;.format(${modulenames}),
              &quot;intel/2021a&quot; :       &quot;{0[intel]}/2021a&quot;.format(${modulenames}),
              &quot;intel/2021b&quot; :       &quot;{0[intel]}/2021b&quot;.format(${modulenames}),
              &quot;intel/2022a&quot; :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2022b&quot; :       &quot;{0[intel]}/2022b&quot;.format(${modulenames}),
              &quot;intel/2023a&quot; :       &quot;{0[intel]}/2023a&quot;.format(${modulenames}),
              &quot;gompi/2020a&quot; :       &quot;{0[gompi]}/2020a&quot;.format(${modulenames}),
              &quot;gompi/2020b&quot; :       &quot;{0[gompi]}/2020b&quot;.format(${modulenames}),
              &quot;gompi/2021a&quot; :       &quot;{0[gompi]}/2021a&quot;.format(${modulenames}),
              &quot;gompi/2021b&quot; :       &quot;{0[gompi]}/2021b&quot;.format(${modulenames}),
              &quot;gompi/2022a&quot; :       &quot;{0[gompi]}/2022a&quot;.format(${modulenames}),
              &quot;gompi/2022b&quot; :       &quot;{0[gompi]}/2022b&quot;.format(${modulenames}),
              &quot;gompi/2023a&quot; :       &quot;{0[gompi]}/2023a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022b&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2023a&quot;.format(${modulenames}),
              &quot;openmpi&quot;:            &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.0.3&quot;:      &quot;{0[openmpi]}/4.0.3&quot;.format(${modulenames}),
              &quot;openmpi/4.0.5&quot;:      &quot;{0[openmpi]}/4.0.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.1&quot;:      &quot;{0[openmpi]}/4.1.1&quot;.format(${modulenames}),
              &quot;openmpi/4.1.4&quot;:      &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.1.5&quot;:      &quot;{0[openmpi]}/4.1.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6&quot;:      &quot;{0[openmpi]}/4.1.6&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6-ucx16&quot;:      &quot;{0[openmpi]}/4.1.6-ucx16&quot;.format(${modulenames}),
              &quot;mpich&quot;:              &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;mpich/4.1.2&quot;:        &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;cmake&quot;:               &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.21.1&quot;:        &quot;{0[cmake]}/3.21.1&quot;.format(${modulenames}),
              &quot;cmake/3.22.1&quot;:        &quot;{0[cmake]}/3.22.1&quot;.format(${modulenames}),
              &quot;cmake/3.23.1&quot;:        &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.24.3&quot;:        &quot;{0[cmake]}/3.24.3&quot;.format(${modulenames}),
              &quot;cmake/3.26.3&quot;:        &quot;{0[cmake]}/3.26.3&quot;.format(${modulenames})    
          }</value>
        <selection>{'gcc': 'GCC/11.3.0', 'gcc/8.3.0': 'GCC/8.3.0', 'gcc/9.3.0': 'GCC/9.3.0', 'gcc/9.4.0': 'GCC/9.4.0', 'gcc/10.2.0': 'GCC/10.2.0', 'gcc/10.3.0': 'GCC/10.3.0', 'gcc/11.2.0': 'GCC/11.2.0', 'gcc/11.3.0': 'GCC/11.3.0', 'clang': 'Clang/13.0.1', 'clang/13.0.1': 'Clang/13.0.1', 'clang/15.0.5': 'Clang/15.0.5', 'clang/16.0.6': 'Clang/16.0.6', 'Classic-Flang': 'Classic-Flang/16.0.4-c23', 'Classic-Flang/16.0.4-c23': 'Classic-Flang/16.0.4-c23', 'intel': 'intel/2022a', 'intel/2019b': 'intel/2019b', 'intel/2020a': 'intel/2020a', 'intel/2020b': 'intel/2020b', 'intel/2021a': 'intel/2021a', 'intel/2021b': 'intel/2021b', 'intel/2022a': 'intel/2022a', 'intel/2022b': 'intel/2022b', 'intel/2023a': 'intel/2023a', 'gompi/2020a': 'gompi/2020a', 'gompi/2020b': 'gompi/2020b', 'gompi/2021a': 'gompi/2021a', 'gompi/2021b': 'gompi/2021b', 'gompi/2022a': 'gompi/2022a', 'gompi/2022b': 'gompi/2022b', 'gompi/2023a': 'gompi/2023a', 'intelmpi': 'iimpi/2023a', 'openmpi': 'openmpi/4.1.4', 'openmpi/4.0.3': 'openmpi/4.0.3', 'openmpi/4.0.5': 'openmpi/4.0.5', 'openmpi/4.1.1': 'openmpi/4.1.1', 'openmpi/4.1.4': 'openmpi/4.1.4', 'openmpi/4.1.5': 'openmpi/4.1.5', 'openmpi/4.1.6': 'openmpi/4.1.6', 'openmpi/4.1.6-ucx16': 'openmpi/4.1.6-ucx16', 'mpich': 'mpich/4.1.2', 'mpich/4.1.2': 'mpich/4.1.2', 'cmake': 'CMake/3.23.1', 'cmake/3.21.1': 'CMake/3.21.1', 'cmake/3.22.1': 'CMake/3.22.1', 'cmake/3.23.1': 'CMake/3.23.1', 'cmake/3.24.3': 'CMake/3.24.3', 'cmake/3.26.3': 'CMake/3.26.3'}</selection>
      </parameter>
      <parameter name="prerequisite_modules_dict" type="string" separator=";" duplicate="none" mode="python">
        <value>{
            &quot;clang/13.0.1&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/15.0.5&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/16.0.6&quot;:       [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;Classic-Flang/16.0.4-c23&quot;:  [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;intelmpi/2021.6.0&quot;:  [&quot;intel-compilers/2022.1.0&quot;],
            &quot;openmpi/4.0.3&quot;:      [&quot;GCC/9.3.0&quot;],
            &quot;openmpi/4.0.5&quot;:      [&quot;GCC/10.2.0&quot;],
            &quot;openmpi/4.1.1&quot;:      [&quot;GCC/11.2.0&quot;],
            &quot;openmpi/4.1.4&quot;:      [&quot;GCC/11.3.0&quot;],
            &quot;openmpi/4.1.5&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6-ucx16&quot;:      [&quot;GCC/12.3.0&quot;],
        }</value>
        <selection>{'clang/13.0.1': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/15.0.5': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/16.0.6': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'Classic-Flang/16.0.4-c23': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'intelmpi/2021.6.0': ['intel-compilers/2022.1.0'], 'openmpi/4.0.3': ['GCC/9.3.0'], 'openmpi/4.0.5': ['GCC/10.2.0'], 'openmpi/4.1.1': ['GCC/11.2.0'], 'openmpi/4.1.4': ['GCC/11.3.0'], 'openmpi/4.1.5': ['GCC/12.3.0'], 'openmpi/4.1.6': ['GCC/12.3.0'], 'openmpi/4.1.6-ucx16': ['GCC/12.3.0']}</selection>
      </parameter>
      <parameter name="cmake_version" type="string" separator="," duplicate="none" mode="text">
        <value>3.26.3</value>
      </parameter>
      <parameter name="cmake_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;cmake/${cmake_version}&quot;) if $modules.get(&quot;cmake/${cmake_version}&quot;) else $modules.get(&quot;cmake&quot;, &quot;cmake/${cmake_version}&quot;)</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="prerequisite_toolchain_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__toolchain_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_compiler_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__compiler_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_mpi_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__mpi_module&quot;, &quot; &quot;))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="prerequisite_modules" type="string" separator="," duplicate="none" mode="text">
        <value>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2</value>
      </parameter>
      <parameter name="toolchain_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${toolchain_name}/${toolchain_version}&quot;, $modules.get(&quot;${toolchain_name}&quot;, &quot;${toolchain_name}&quot; + (&quot;/${toolchain_version}&quot; if &quot;${toolchain_version}&quot; else &quot;&quot;)))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="compiler_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${compiler_name}/${compiler_version}&quot;, $modules.get(&quot;${compiler_name}&quot;, &quot;${compiler_name}&quot; + (&quot;/${compiler_version}&quot; if &quot;${compiler_version}&quot; else &quot;&quot;)))</value>
        <selection>Classic-Flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="mpi_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${mpi_name}/${mpi_version}&quot;, $modules.get(&quot;${mpi_name}&quot;, &quot;${mpi_name}&quot; + (&quot;/${mpi_version}&quot; if &quot;${mpi_version}&quot; else &quot;&quot;)))</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="required_modules" type="string" separator="," duplicate="none" mode="text">
        <value>${prerequisite_modules} ${toolchain_module} ${mpi_module} ${compiler_module} ${cmake_module} ${must_prerequisite_modules}</value>
        <selection>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3</selection>
      </parameter>
      <parameter name="use_modules" type="string" separator="," duplicate="none" mode="text">
        <value>/home/rwth1269/modules</value>
      </parameter>
      <parameter name="load_modules" type="string" separator="," duplicate="none" mode="text">
        <value>module use /home/rwth1269/modules/; module purge; for path in ${use_modules}; do module use $path; done; for modulename in ${required_modules}; do module load $modulename; done</value>
        <selection>module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done</selection>
      </parameter>
      <parameter name="__toolchain_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${toolchain_module}&quot;.lower()</value>
        <selection>gcc/12.3.0</selection>
      </parameter>
      <parameter name="__compiler_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${compiler_module}&quot;.lower()</value>
        <selection>classic-flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="__mpi_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${mpi_module}&quot;.lower()</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="force_compilation" type="string" separator="," duplicate="none" mode="text">
        <value>true</value>
      </parameter>
      <parameter name="executable_full_name" type="string" separator="," duplicate="none" mode="text">
        <value>${executable_name}${executable_extension}</value>
        <selection>bt-rma.D.x.tsan</selection>
      </parameter>
      <parameter name="compile_preparation" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_flags" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
         &quot;tsan&quot;: &quot;${must_stats_compile_flags} -g&quot;,
         &quot;tsan-opt&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags} -g --optimizations ${must_compile_opt}&quot;,
         &quot;isl&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags}&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection> -g</selection>
      </parameter>
      <parameter name="tsan_opt_extension" type="string" separator="," duplicate="none" mode="text">
        <value>.tsan-opt.${__tsan_opt_hash}</value>
        <selection>.tsan-opt.a3ee41195bbb95b762933c3809053432</selection>
      </parameter>
      <parameter name="executable_extension" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
        &quot;tsan&quot;: &quot;.tsan&quot;,
        &quot;tsan-opt&quot;: &quot;${tsan_opt_extension}&quot;,
        &quot;isl&quot;: &quot;.isl&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>.tsan</selection>
      </parameter>
      <parameter name="compile_target" type="string" separator="," duplicate="none" mode="text">
        <value>bt-rma</value>
      </parameter>
      <parameter name="benchmark_build_dir" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${jube_benchmark_home}/executables/${__toolchain_module}/${__compiler_module}/${__mpi_module}/&quot; + (&quot;${RMA_target}&quot; if &quot;${RMA_target}&quot;.split() else &quot;Default&quot;)</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/executables/gcc/12.3.0/classic-flang/16.0.4-c23/openmpi/4.1.6/Default</selection>
      </parameter>
      <parameter name="do_compile" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_compilation} || [ ! -f &quot;${benchmark_build_dir}/${executable_full_name}&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="compile_common_env_vars" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;:     &quot;MPICC='mpicc ${compile_flags}' MPICXX='mpicxx ${compile_flags}' MPIFC='mpifc ${compile_flags}'&quot;,
         &quot;tsan&quot;:     &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;tsan-opt&quot;: &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;isl&quot;:      &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;}.get(&quot;${compile_mode}&quot;, '')</value>
        <selection>MPICC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc  -g&quot; MPICXX=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx  -g&quot; MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort --wrap-target mpif90  -g&quot;</selection>
      </parameter>
      <parameter name="compile_env_vars" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${compile_common_env_vars} ${compile_env_vars}; do export &quot;$item&quot;; done</value>
        <selection>for item in MPICC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc  -g&quot; MPICXX=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx  -g&quot; MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort --wrap-target mpif90  -g&quot; ; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="time_output_file" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>${jube_wp_abspath}/time.out</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000003_compile_tsan/work/time.out</selection>
      </parameter>
      <parameter name="time_measure_command" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="executable_name" type="string" separator="," duplicate="none" mode="text">
        <value>${compile_target}.${CLASS}.x</value>
        <selection>bt-rma.D.x</selection>
      </parameter>
      <parameter name="RMA_target" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="export_flags" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;: 'OMPI_FC=flang MPIFC=&quot;mpif90&quot; FFLAGS=&quot;-g -O3&quot;',
        &quot;tsan&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 ${must_stats_compile_flags}&quot;',
        &quot;tsan-opt&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 --optimizations ${must_compile_opt} -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 --optimizations ${must_compile_opt} ${must_stats_compile_flags}&quot;'}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>OMPI_FC=flang MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 -g &quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 &quot;</selection>
      </parameter>
      <parameter name="export_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{
              (&quot;clang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;, &quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;clang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;],
              (&quot;Classic-Flang&quot;, &quot;mpich&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;Classic-Flang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
          }</value>
      </parameter>
      <parameter name="compiler_mpi_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${mpi_name}&quot;), []))</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m</selection>
      </parameter>
      <parameter name="compiler_toolchain_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${toolchain_name}&quot;), []))</value>
        <selection/>
      </parameter>
      <parameter name="required_exports" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${compiler_mpi_export} ${compiler_toolchain_export} ${openmp_export} ${must_export}</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${required_exports}; do export &quot;$item&quot;; done</value>
        <selection>for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="must_compile_opt" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;tsan-opt&quot;: &quot;ALX1000,CLUSTER&quot;}.get(&quot;${compile_mode}&quot;, &quot;&quot;)</value>
        <selection/>
      </parameter>
      <parameter name="__tsan_opt_hash" type="string" separator=";" duplicate="none" mode="shell">
        <value>echo -n &quot;$must_compile_opt $__must_hash&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>a3ee41195bbb95b762933c3809053432</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>1</parents>
    <iteration_siblings>3</iteration_siblings>
    <environment>
      <env name="LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:/home/ss540294/opt/lib:/home/ss540294/bin/lib:/home/ss540294/jack/usr/lib64'</env>
      <env name="EBVERSIONXZ">'5.4.2'</env>
      <env name="_ModuleTable017_">'Y3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0MvMTIuMy4wIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wIgosICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5lcnMiCiwg'</env>
      <env name="EBROOTBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENACC">'LWZvcGVuYWNj'</env>
      <env name="EBROOTCLANG">'/work/rwth1269/software/c23/classic-flang'</env>
      <env name="__LMOD_STACK_FLAGS_FREE">'LWZmcmVlLWZvcm0='</env>
      <env name="__LMOD_REF_COUNT_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:1;/work/rwth1269/software/c23/classic-flang/bin:1;/work/rwth1269/software/openmpi/4.1.6/bin:1;/work/rwth1269/software/netcdf/4.9.2/bin:1;/work/rwth1269/software/gpi/1.5.1-ompi/bin:1;/work/rwth1269/software/sos/1.5.2-ompi/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:1;/home/ss540294/software/stress/usr/bin:2;/home/ss540294/software/ccache/bin:2;/home/ss540294/.local/bin:2;/home/ss540294/software/mpiP/bin:2;/home/ss540294/software/git/bin:2;/home/ss540294/htop/bin:2;/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:1;/usr/local_host/bin:1;/usr/local_host/sbin:1;/usr/local_rwth/bin:1;/usr/local_rwth/sbin:1;/usr/bin:1;/usr/sbin:1;/bin:1;/sbin:1;/opt/singularity/bin:1;/usr/local/bin:1;/usr/local/sbin:1;/opt/slurm/current/sbin:1;/opt/slurm/current/bin:1;/home/ss540294/dotfiles/tools/diff-so-fancy:2;/home/ss540294/dotfiles/zsh/plugins/fzf/bin:1'</env>
      <env name="_ModuleTable002_">'MDAwMjYuMDAwMDAwMDAzLip6ZmluYWwiLAp9LApbIkNsYXNzaWMtRmxhbmciXSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9DbGFzc2ljLUZsYW5nLzE2LjAuNC1jMjMubHVhIiwKZnVsbE5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKbG9hZE9yZGVyID0gMTYsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAwLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKd1YgPSAiMDAwMDAwMDE2LjAwMDAwMDAwMC4wMDAwMDAwMDQuKmMuMDAwMDAwMDIzLip6ZmluYWwiLAp9LApHQ0MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBo'</env>
      <env name="FLAGS_FAST_NO_FPOPT">'-O3 -mtune=native'</env>
      <env name="EBVERSIONNUMACTL">'2.0.16'</env>
      <env name="EBROOTGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable019_">'ZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvcmUiCiwgIi93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvQ29udGFpbmVycyIsICIvd29yay9yd3RoMTI2OS9tb2R1bGVzIiwgIi9ob21lL3J3dGgxMjY5L21vZHVsZXMiLCAiL2hvbWUvc3M1NDAyOTQvLm1vZHVsZXMiLCAiL3dvcmsvc3M1NDAyOTQvbW9kdWxlcyIsCn0sCnN5c3RlbUJhc2VNUEFUSCA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlOi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5l'</env>
      <env name="_ModuleTable008_">'eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2JpbnV0aWxzLzIuNDAubHVhIiwKZnVsbE5hbWUgPSAiYmludXRpbHMvMi40MCIsCmxvYWRPcmRlciA9IDksCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiYmludXRpbHMvMi40MCIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwNDAuKnpmaW5hbCIsCn0sCmJ6aXAyID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9iemlwMi8xLjAuOC5sdWEiLApm'</env>
      <env name="FLAGS_GCCcore_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="FLINKFLAGS">'-O3 -g --wrap-target mpif90'</env>
      <env name="EBDEVELNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-numactl-2.0.16-easybuild-devel'</env>
      <env name="__LMOD_STACK_F77">'Z2ZvcnRyYW4gLWZuby1zaWduLXplcm8='</env>
      <env name="EBDEVELBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-bzip2-1.0.8-easybuild-devel'</env>
      <env name="GCCcore_ROOT">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="__LMOD_REF_COUNT_XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:1;/work/rwth1269/software/c23/classic-flang/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:1;/usr/local/share:1;/usr/share:1'</env>
      <env name="OBJC">'gcc'</env>
      <env name="EBROOTNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0'</env>
      <env name="_ModuleTable007_">'PSAiMDAwMDAwMDAxLjAwMDAwMDAxNC4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClhaID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9YWi81LjQuMi5sdWEiLApmdWxsTmFtZSA9ICJYWi81LjQuMiIsCmxvYWRPcmRlciA9IDUsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSA0LApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiWFovNS40LjIiLAp3ViA9ICIwMDAwMDAwMDUuMDAwMDAwMDA0LjAwMDAwMDAwMi4qemZpbmFsIiwKfSwKYmludXRpbHMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51'</env>
      <env name="__LMOD_STACK_CC">'Z2Nj'</env>
      <env name="EBROOTCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0'</env>
      <env name="FLAGS_OFFLOAD_OPENMP">'-fopenmp'</env>
      <env name="__LMOD_REF_COUNT_LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1;/home/ss540294/opt/lib:2;/home/ss540294/bin/lib:2;/home/ss540294/jack/usr/lib64:2'</env>
      <env name="__LMOD_REF_COUNT_PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig:1'</env>
      <env name="OBJCXX">'g++'</env>
      <env name="EBROOTGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable015_">'b2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9udW1hY3RsLzIuMC4xNi5sdWEiLApmdWxsTmFtZSA9ICJudW1hY3RsLzIuMC4xNiIsCmxvYWRPcmRlciA9IDMsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAibnVtYWN0bC8yLjAuMTYiLAp3ViA9ICIwMDAwMDAwMDIuMDAwMDAwMDAwLjAwMDAwMDAxNi4qemZpbmFsIiwKfSwKb3Blbm1waSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9vcGVubXBpLzQuMS42Lmx1YSIsCmZ1bGxOYW1lID0gIm9wZW5tcGkvNC4xLjYiLApsb2FkT3JkZXIgPSAxNSwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFt'</env>
      <env name="__LMOD_STACK_FC">'Z2ZvcnRyYW4='</env>
      <env name="_ModuleTable004_">'ZGVyID0gMSwKcHJvcFQgPSB7CnR5cGVfID0gewpjb21waWxlciA9IDEsCn0sCn0sCnN0YWNrRGVwdGggPSAxLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxMi4wMDAwMDAwMDMuKnpmaW5hbCIsCn0sCkdQSSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9HUEkvMS41LjEtb21waS5sdWEiLApmdWxsTmFtZSA9ICJHUEkvMS41LjEtb21waSIsCmxvYWRPcmRlciA9IDEyLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkdQSS8xLjUuMS1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDEuKm9tcGku'</env>
      <env name="EBVERSIONGCC">'12.3.0'</env>
      <env name="EBVERSIONUCX">'1.14.1'</env>
      <env name="EBDEVELXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-XZ-5.4.2-easybuild-devel'</env>
      <env name="EBDEVELHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-hwloc-2.9.1-easybuild-devel'</env>
      <env name="CC">'clang'</env>
      <env name="MPI_BINDIR">'/work/rwth1269/software/openmpi/4.1.6/bin'</env>
      <env name="EBROOTZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_AUTOPAR">'false'</env>
      <env name="EBDEVELLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libxml2-2.11.4-easybuild-devel'</env>
      <env name="__LMOD_STACK_OBJCXX">'Zysr'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1'</env>
      <env name="EBVERSIONHWLOC">'2.9.1'</env>
      <env name="EBVERSIONGCCCORE">'12.3.0'</env>
      <env name="_ModuleTable012_">'c2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlicGNpYWNjZXNzLzAuMTcubHVhIiwKZnVsbE5hbWUgPSAibGlicGNpYWNjZXNzLzAuMTciLApsb2FkT3JkZXIgPSA3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnBjaWFjY2Vzcy8wLjE3IiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxNy4qemZpbmFsIiwKfSwKbGlieG1sMiA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlieG1sMi8yLjExLjQubHVhIiwKZnVs'</env>
      <env name="EBROOTXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0'</env>
      <env name="OMPI_CXX">'clang++'</env>
      <env name="EBROOTLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0'</env>
      <env name="MPICXX">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx  -g'</env>
      <env name="__LMOD_STACK_FLAGS_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_REF_COUNT_MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:1;/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:5;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:8;/work/ss540294/.local/easybuild/modules/all/Core:16;/work/ss540294/.local/easybuild/modules/all/Containers:16;/work/rwth1269/modules:9;/home/rwth1269/modules:10;/home/ss540294/.modules:11;/work/ss540294/modules:11'</env>
      <env name="EBDEVELLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libarchive-3.6.2-easybuild-devel'</env>
      <env name="EBROOTBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0'</env>
      <env name="CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:/work/rwth1269/software/c23/classic-flang:/work/rwth1269/software/openmpi/4.1.6:/work/rwth1269/software/netcdf/4.9.2:/work/rwth1269/software/gpi/1.5.1-ompi:/work/rwth1269/software/sos/1.5.2-ompi:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="LASTCOMPILER">'GCCcore'</env>
      <env name="EBDEVELUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-UCX-1.14.1-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_RUNTIME_LINKER">'LVdsLC1ycGF0aD0='</env>
      <env name="CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:/work/rwth1269/software/c23/classic-flang/include:/work/rwth1269/software/openmpi/4.1.6/include:/work/rwth1269/software/netcdf/4.9.2/include:/work/rwth1269/software/gpi/1.5.1-ompi/include:/work/rwth1269/software/sos/1.5.2-ompi/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include'</env>
      <env name="__LMOD_STACK_FLAGS_FAST_NO_FPOPT">'LU8zIC1tdHVuZT1uYXRpdmU='</env>
      <env name="F77">'gfortran -fno-sign-zero'</env>
      <env name="EBDEVELCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-cURL-8.0.1-easybuild-devel'</env>
      <env name="EBROOTCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0'</env>
      <env name="XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:/work/rwth1269/software/c23/classic-flang/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:/usr/local/share:/usr/share'</env>
      <env name="OSHCXX">'oshcxx'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000003_compile_tsan/work/time.out'</env>
      <env name="UCX_UD_MLX5_TIMEOUT">'2m'</env>
      <env name="FLAGS_FREE">'-ffree-form'</env>
      <env name="MPI_NAME">'OpenMPI'</env>
      <env name="EBVERSIONLIBPCIACCESS">'0.17'</env>
      <env name="__LMOD_STACK_FLAGS_ARCH64">'LW02NA=='</env>
      <env name="EBROOTLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0'</env>
      <env name="CURL_INCLUDES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include'</env>
      <env name="__LMOD_REF_COUNT_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/home/ss540294/bin/lib:2'</env>
      <env name="FLAGS_OFFLOAD_OPENACC">'-fopenacc'</env>
      <env name="EBVERSIONLIBXML2">'2.11.4'</env>
      <env name="FLAGS_OPENMP">'-fopenmp'</env>
      <env name="LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/home/ss540294/bin/lib'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:1;/work/rwth1269/software/c23/classic-flang:1;/work/rwth1269/software/openmpi/4.1.6:1;/work/rwth1269/software/netcdf/4.9.2:1;/work/rwth1269/software/gpi/1.5.1-ompi:1;/work/rwth1269/software/sos/1.5.2-ompi:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0:1'</env>
      <env name="_ModuleTable010_">'CnVzZXJOYW1lID0gImNVUkwvOC4wLjEiLAp3ViA9ICIwMDAwMDAwMDguMDAwMDAwMDAwLjAwMDAwMDAwMS4qemZpbmFsIiwKfSwKaHdsb2MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2h3bG9jLzIuOS4xLmx1YSIsCmZ1bGxOYW1lID0gImh3bG9jLzIuOS4xIiwKbG9hZE9yZGVyID0gOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJod2xvYy8yLjkuMSIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwMDkuMDAwMDAwMDAxLip6ZmluYWwiLAp9LApsaWJhcmNoaXZl'</env>
      <env name="_ModuleTable001_">'X01vZHVsZVRhYmxlXyA9IHsKTVR2ZXJzaW9uID0gMywKY19yZWJ1aWxkVGltZSA9IGZhbHNlLApjX3Nob3J0VGltZSA9IGZhbHNlLApkZXB0aFQgPSB7fSwKZmFtaWx5ID0ge30sCm1UID0gewpDTWFrZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvQ01ha2UvMy4yNi4zLmx1YSIsCmZ1bGxOYW1lID0gIkNNYWtlLzMuMjYuMyIsCmxvYWRPcmRlciA9IDIxLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkNNYWtlLzMuMjYuMyIsCndWID0gIjAwMDAwMDAwMy4wMDAw'</env>
      <env name="LOADEDMODULES">'GCCcore/.12.3.0:zlib/1.2.13:numactl/2.0.16:UCX/1.14.1:XZ/5.4.2:libxml2/2.11.4:libpciaccess/0.17:hwloc/2.9.1:binutils/2.40:ncurses/6.4:SOS/1.5.2-ompi:GPI/1.5.1-ompi:netcdf/4.9.2:GCC/12.3.0:openmpi/4.1.6:Classic-Flang/16.0.4-c23:bzip2/1.0.8:OpenSSL/1.1:cURL/8.0.1:libarchive/3.6.2:CMake/3.26.3'</env>
      <env name="FC">'flang'</env>
      <env name="__LMOD_REF_COUNT_ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal:1'</env>
      <env name="FLAGS_MPI_BATCH">''</env>
      <env name="__LMOD_REF_COUNT_MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:1;/work/rwth1269/software/c23/classic-flang/share/man:1;/work/rwth1269/software/openmpi/4.1.6/share/man:1;/work/rwth1269/software/netcdf/4.9.2/share/man:1;/work/rwth1269/software/gpi/1.5.1-ompi/share/man:1;/work/rwth1269/software/sos/1.5.2-ompi/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:1;/usr/local_host/man:1;/usr/local_rwth/man:1;/usr/man:1;/usr/share/man:1;/usr/local/man:1;/usr/local/share/man:1;/opt/slurm/current/share/man:1'</env>
      <env name="_ModuleTable006_">'IDExLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIlNPUy8xLjUuMi1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDIuKm9tcGkuKnpmaW5hbCIsCn0sClVDWCA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvVUNYLzEuMTQuMS5sdWEiLApmdWxsTmFtZSA9ICJVQ1gvMS4xNC4xIiwKbG9hZE9yZGVyID0gNCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJVQ1gvMS4xNC4xIiwKd1Yg'</env>
      <env name="__LMOD_STACK_OBJC">'Z2Nj'</env>
      <env name="MPI_INCLUDE">'/work/rwth1269/software/openmpi/4.1.6/include'</env>
      <env name="_ModuleTable003_">'aXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvR0NDLzEyLjMuMC5sdWEiLApmdWxsTmFtZSA9ICJHQ0MvMTIuMy4wIiwKbG9hZE9yZGVyID0gMTQsCnByb3BUID0gewp0eXBlXyA9IHsKdG9vbGNoYWluID0gMSwKfSwKfSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJHQ0MvMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDEyLjAwMDAwMDAwMy4qemZpbmFsIiwKfSwKR0NDY29yZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29yZS9HQ0Njb3JlLy4xMi4zLjAubHVhIiwKZnVsbE5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKbG9hZE9y'</env>
      <env name="MPICC">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc  -g'</env>
      <env name="_ModuleTable013_">'bE5hbWUgPSAibGlieG1sMi8yLjExLjQiLApsb2FkT3JkZXIgPSA2LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnhtbDIvMi4xMS40IiwKd1YgPSAiMDAwMDAwMDAyLjAwMDAwMDAxMS4wMDAwMDAwMDQuKnpmaW5hbCIsCn0sCm5jdXJzZXMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL25jdXJzZXMvNi40Lmx1YSIsCmZ1bGxOYW1lID0gIm5jdXJzZXMvNi40IiwKbG9hZE9yZGVyID0gMTAsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAi'</env>
      <env name="MPIFC">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort'</env>
      <env name="EBDEVELLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libpciaccess-0.17-easybuild-devel'</env>
      <env name="__LMOD_STACK_CPP">'Y3Bw'</env>
      <env name="CXX">'clang++'</env>
      <env name="_ModuleTable016_">'ZSA9ICJvcGVubXBpLzQuMS42IiwKd1YgPSAiMDAwMDAwMDA0LjAwMDAwMDAwMS4wMDAwMDAwMDYuKnpmaW5hbCIsCn0sCnpsaWIgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL3psaWIvMS4yLjEzLmx1YSIsCmZ1bGxOYW1lID0gInpsaWIvMS4yLjEzIiwKbG9hZE9yZGVyID0gMiwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDMsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJ6bGliLzEuMi4xMyIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDIuMDAwMDAwMDEzLip6ZmluYWwiLAp9LAp9LAptcGF0aEEgPSB7CiIv'</env>
      <env name="_ModuleTable009_">'dWxsTmFtZSA9ICJiemlwMi8xLjAuOCIsCmxvYWRPcmRlciA9IDE3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImJ6aXAyLzEuMC44IiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwMC4wMDAwMDAwMDguKnpmaW5hbCIsCn0sCmNVUkwgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2NVUkwvOC4wLjEubHVhIiwKZnVsbE5hbWUgPSAiY1VSTC84LjAuMSIsCmxvYWRPcmRlciA9IDE5LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIs'</env>
      <env name="FLAGS_FAST">'-O3 -ffast-math -mtune=native'</env>
      <env name="EBDEVELGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/easybuild/Core-GCCcore-.12.3.0-easybuild-devel'</env>
      <env name="EBROOTHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable_Sz_">'20'</env>
      <env name="__LMOD_REF_COUNT_CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:1;/work/rwth1269/software/c23/classic-flang/include:1;/work/rwth1269/software/openmpi/4.1.6/include:1;/work/rwth1269/software/netcdf/4.9.2/include:1;/work/rwth1269/software/gpi/1.5.1-ompi/include:1;/work/rwth1269/software/sos/1.5.2-ompi/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include:1'</env>
      <env name="__LMOD_STACK_FLAGS_PIC">'LWZQSUMgLXNoYXJlZA=='</env>
      <env name="EBDEVELNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-ncurses-6.4-easybuild-devel'</env>
      <env name="_ModuleTable018_">'Ii93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvTVBJL2ludGVsLzIwMjIuMS4wL2ltcGkvMjAyMS42LjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9pbnRlbC8yMDIyLjEuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTEuMy4wIgosICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQy8xMi4zLjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwv'</env>
      <env name="OSHCC">'oshcc'</env>
      <env name="OMPI_FC">'flang'</env>
      <env name="EBDEVELBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-binutils-2.40-easybuild-devel'</env>
      <env name="SHLVL">'6'</env>
      <env name="ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal'</env>
      <env name="MPIEXEC">'srun'</env>
      <env name="FFLAGS">'-O3 --wrap-target mpif90 -g'</env>
      <env name="MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:/work/rwth1269/software/c23/classic-flang/share/man:/work/rwth1269/software/openmpi/4.1.6/share/man:/work/rwth1269/software/netcdf/4.9.2/share/man:/work/rwth1269/software/gpi/1.5.1-ompi/share/man:/work/rwth1269/software/sos/1.5.2-ompi/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:/usr/local_host/man:/usr/local_rwth/man:/usr/man:/usr/share/man:/usr/local/man:/usr/local/share/man:/opt/slurm/current/share/man'</env>
      <env name="EBDEVELGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCC/12.3.0/easybuild/Core-GCC-12.3.0-easybuild-devel'</env>
      <env name="MPI_LIBDIR">'/work/rwth1269/software/openmpi/4.1.6/lib'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_STACK_LASTCOMPILER">'R0NDY29yZQ=='</env>
      <env name="FLAGS_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:/work/ss540294/.local/easybuild/modules/all/Core:/work/ss540294/.local/easybuild/modules/all/Containers:/work/rwth1269/modules:/home/rwth1269/modules:/home/ss540294/.modules:/work/ss540294/modules'</env>
      <env name="OMPI_CC">'clang'</env>
      <env name="EBVERSIONBINUTILS">'2.40'</env>
      <env name="EBDEVELZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-zlib-1.2.13-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_FAST">'LU8zIC1mZmFzdC1tYXRoIC1tdHVuZT1uYXRpdmU='</env>
      <env name="PATH">'//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:/work/rwth1269/software/c23/classic-flang/bin:/work/rwth1269/software/openmpi/4.1.6/bin:/work/rwth1269/software/netcdf/4.9.2/bin:/work/rwth1269/software/gpi/1.5.1-ompi/bin:/work/rwth1269/software/sos/1.5.2-ompi/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:/home/ss540294/software/stress/usr/bin:/home/ss540294/software/ccache/bin:/home/ss540294/.local/bin:/home/ss540294/software/mpiP/bin:/home/ss540294/software/git/bin:/home/ss540294/htop/bin:/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:/usr/local_host/bin:/usr/local_host/sbin:/usr/local_rwth/bin:/usr/local_rwth/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/singularity/bin:/usr/local/bin:/usr/local/sbin:/opt/slurm/current/sbin:/opt/slurm/current/bin:/home/ss540294/dotfiles/tools/diff-so-fancy:/home/ss540294/dotfiles/zsh/plugins/fzf/bin'</env>
      <env name="_ModuleTable014_">'YWN0aXZlIiwKdXNlck5hbWUgPSAibmN1cnNlcy82LjQiLAp3ViA9ICIwMDAwMDAwMDYuMDAwMDAwMDA0Lip6ZmluYWwiLAp9LApuZXRjZGYgPSB7CmZuID0gIi9ob21lL3J3dGgxMjY5L21vZHVsZXMvbmV0Y2RmLzQuOS4yLmx1YSIsCmZ1bGxOYW1lID0gIm5ldGNkZi80LjkuMiIsCmxvYWRPcmRlciA9IDEzLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIm5ldGNkZi80LjkuMiIsCndWID0gIjAwMDAwMDAwNC4wMDAwMDAwMDkuMDAwMDAwMDAyLip6ZmluYWwiLAp9LApudW1hY3RsID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9t'</env>
      <env name="_LMFILES_">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCCcore/.12.3.0.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/zlib/1.2.13.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/numactl/2.0.16.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/UCX/1.14.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/XZ/5.4.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libxml2/2.11.4.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libpciaccess/0.17.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/hwloc/2.9.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/binutils/2.40.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/ncurses/6.4.lua:/home/rwth1269/modules/SOS/1.5.2-ompi.lua:/home/rwth1269/modules/GPI/1.5.1-ompi.lua:/home/rwth1269/modules/netcdf/4.9.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCC/12.3.0.lua:/home/rwth1269/modules/openmpi/4.1.6.lua:/home/rwth1269/modules/Classic-Flang/16.0.4-c23.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/bzip2/1.0.8.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/OpenSSL/1.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/cURL/8.0.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libarchive/3.6.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/CMake/3.26.3.lua'</env>
      <env name="EBROOTLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0'</env>
      <env name="PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig'</env>
      <env name="__LMOD_STACK_FLAGS_DEBUG">'LWc='</env>
      <env name="_ModuleTable011_">'ID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9saWJhcmNoaXZlLzMuNi4yLmx1YSIsCmZ1bGxOYW1lID0gImxpYmFyY2hpdmUvMy42LjIiLApsb2FkT3JkZXIgPSAyMCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDEsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJsaWJhcmNoaXZlLzMuNi4yIiwKd1YgPSAiMDAwMDAwMDAzLjAwMDAwMDAwNi4wMDAwMDAwMDIuKnpmaW5hbCIsCn0sCmxpYnBjaWFjY2VzcyA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwv'</env>
      <env name="OMPI_MCA_mtl">'^ofi'</env>
      <env name="EBROOTNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_CXX">'Zysr'</env>
      <env name="CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="__LMOD_STACK_FLAGS_RPATH">'LVdsLC1ycGF0aD0vY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9zb2Z0d2FyZS9HQ0Njb3JlLzEyLjMuMC9saWI2NA=='</env>
      <env name="CPP">'cpp'</env>
      <env name="EBROOTUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable005_">'KnpmaW5hbCIsCn0sCk9wZW5TU0wgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvT3BlblNTTC8xLjEubHVhIiwKZnVsbE5hbWUgPSAiT3BlblNTTC8xLjEiLApsb2FkT3JkZXIgPSAxOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJPcGVuU1NMLzEuMSIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClNPUyA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9TT1MvMS41LjItb21waS5sdWEiLApmdWxsTmFtZSA9ICJTT1MvMS41LjItb21waSIsCmxvYWRPcmRlciA9'</env>
      <env name="EBDEVELCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-CMake-3.26.3-easybuild-devel'</env>
      <env name="_ModuleTable020_">'cnMiLAp9Cg=='</env>
      <env name="LMOD_FAMILY_MPI">'OpenMPI'</env>
      <env name="OMPI_MCA_btl">'^ofi,openib,tcp'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
      <nonenv name="intel_compilers_FC"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI_VERSION"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI"/>
      <nonenv name="__LMOD_STACK_LASTMPI"/>
      <nonenv name="EBVERSIONIMKLMINFFTW"/>
      <nonenv name="I_MPI_PMI_LIBRARY"/>
      <nonenv name="OCL_ICD_FILENAMES"/>
      <nonenv name="LMOD_FAMILY_MPI_VERSION"/>
      <nonenv name="intel_compilers_CC"/>
      <nonenv name="FLAGS_intel_compilers_AUTOPAR"/>
      <nonenv name="FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="EBROOTHTOP"/>
      <nonenv name="EBDEVELSQLITE"/>
      <nonenv name="EBDEVELIMKL"/>
      <nonenv name="EBVERSIONINTELMINCOMPILERS"/>
      <nonenv name="EBROOTIMKL"/>
      <nonenv name="FLAGS_intel_compilers_RPATH"/>
      <nonenv name="__LMOD_REF_COUNT_NLSPATH"/>
      <nonenv name="intel_compilers_ROOT"/>
      <nonenv name="EBROOTLIBFFI"/>
      <nonenv name="__LMOD_REF_COUNT_FI_PROVIDER_PATH"/>
      <nonenv name="FI_PROVIDER_PATH"/>
      <nonenv name="__LMOD_REF_COUNT_PYTHONPATH"/>
      <nonenv name="__LMOD_REF_COUNT_DIAGUTIL_PATH"/>
      <nonenv name="INTEL_PYTHONHOME"/>
      <nonenv name="CLASSPATH"/>
      <nonenv name="FLAGS_intel_compilers_DEBUG"/>
      <nonenv name="FLAGS_intel_compilers_FAST"/>
      <nonenv name="EBDEVELIMPI"/>
      <nonenv name="DAPL_CM_ROUTE_TIMEOUT_MS"/>
      <nonenv name="FPGA_VARS_DIR"/>
      <nonenv name="CMPLR_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_RUNTIME_LINKER"/>
      <nonenv name="EBROOTINTEL"/>
      <nonenv name="__LMOD_STACK_MPICXX"/>
      <nonenv name="EBVERSIONSQLITE"/>
      <nonenv name="FLAGS_intel_compilers_OPENMP"/>
      <nonenv name="EBVERSIONHTOP"/>
      <nonenv name="EBVERSIONLIBFFI"/>
      <nonenv name="EBROOTIMPI"/>
      <nonenv name="FLAGS_intel_compilers_FREE"/>
      <nonenv name="__LMOD_STACK_MPICC"/>
      <nonenv name="EBROOTINTELMINCOMPILERS"/>
      <nonenv name="EBROOTSQLITE"/>
      <nonenv name="R_MPI_ROOT"/>
      <nonenv name="EBROOTLIBREADLINE"/>
      <nonenv name="GDB_INFO"/>
      <nonenv name="INTELFPGAOCLSDKROOT"/>
      <nonenv name="EBDEVELIMKLMINFFTW"/>
      <nonenv name="EBDEVELGMP"/>
      <nonenv name="__LMOD_REF_COUNT_INFOPATH"/>
      <nonenv name="INTELARCH"/>
      <nonenv name="EBDEVELTCL"/>
      <nonenv name="EBDEVELPYTHON"/>
      <nonenv name="EBVERSIONGMP"/>
      <nonenv name="NLSPATH"/>
      <nonenv name="EBVERSIONTCL"/>
      <nonenv name="EBDEVELINTEL"/>
      <nonenv name="EBDEVELHTOP"/>
      <nonenv name="EBEXTSLISTPYTHON"/>
      <nonenv name="_ModuleTable021_"/>
      <nonenv name="EBROOTPYTHON"/>
      <nonenv name="MKL_EXAMPLES"/>
      <nonenv name="DIAGUTIL_PATH"/>
      <nonenv name="EBVERSIONPYTHON"/>
      <nonenv name="EBDEVELINTELMINCOMPILERS"/>
      <nonenv name="EBROOTTCL"/>
      <nonenv name="I_MPI_FABRICS"/>
      <nonenv name="__LMOD_REF_COUNT_FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="__LMOD_STACK_MPIF77"/>
      <nonenv name="I_MPI_OFI_PROVIDER"/>
      <nonenv name="EBDEVELLIBFFI"/>
      <nonenv name="__LMOD_STACK_MPIFC"/>
      <nonenv name="EBVERSIONIMPI"/>
      <nonenv name="LASTMPI"/>
      <nonenv name="I_MPI_JOB_SIGNAL_PROPAGATION"/>
      <nonenv name="FLAGS_intel_compilers_PIC"/>
      <nonenv name="EBROOTGMP"/>
      <nonenv name="FLAGS_intel_compilers_FAST_NO_FPOPT"/>
      <nonenv name="PYTHONPATH"/>
      <nonenv name="MPIF77"/>
      <nonenv name="EBROOTIMKLMINFFTW"/>
      <nonenv name="intel_compilers_F77"/>
      <nonenv name="FLAGS_AUTOPAR"/>
      <nonenv name="EBDEVELLIBREADLINE"/>
      <nonenv name="ONEAPI_ROOT"/>
      <nonenv name="MKLROOT"/>
      <nonenv name="intel_compilers_CXX"/>
      <nonenv name="TBBROOT"/>
      <nonenv name="EBVERSIONINTEL"/>
      <nonenv name="EBVERSIONLIBREADLINE"/>
      <nonenv name="INFOPATH"/>
      <nonenv name="I_MPI_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_ARCH64"/>
      <nonenv name="EBVERSIONIMKL"/>
      <nonenv name="EBDEVELJUBE"/>
      <nonenv name="EBROOTJUBE"/>
      <nonenv name="EBVERSIONJUBE"/>
      <nonenv name="__LMOD_REF_COUNT_JUBE_INCLUDE_PATH"/>
      <nonenv name="JUBE_INCLUDE_PATH"/>
      <nonenv name="_ModuleTable022_"/>
    </environment>
  </workpackage>
  <workpackage id="4">
    <step iteration="0" cycle="0">compile</step>
    <parameterset>
      <parameter name="toolchain_name" type="string" separator="," duplicate="none" mode="text">
        <value>GCC</value>
      </parameter>
      <parameter name="toolchain_version" type="string" separator="," duplicate="none" mode="text">
        <value>12.3.0</value>
      </parameter>
      <parameter name="compiler_name" type="string" separator="," duplicate="none" mode="text">
        <value>Classic-Flang</value>
      </parameter>
      <parameter name="compiler_version" type="string" separator="," duplicate="none" mode="text">
        <value>16.0.4-c23</value>
      </parameter>
      <parameter name="mpi_name" type="string" separator="," duplicate="none" mode="text">
        <value>openmpi</value>
      </parameter>
      <parameter name="mpi_version" type="string" separator="," duplicate="none" mode="text">
        <value>4.1.6</value>
      </parameter>
      <parameter name="compile_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,tsan,tsan-opt</value>
        <selection idx="2">tsan-opt</selection>
      </parameter>
      <parameter name="modulenames_defaults" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;gcc&quot;,
            &quot;clang&quot;: &quot;clang&quot;,
            &quot;intelmpi&quot;: &quot;intelmpi&quot;,
            &quot;cmake&quot;: &quot;cmake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{
            &quot;gcc&quot;: &quot;GCC&quot;,
            &quot;clang&quot;: &quot;Clang&quot;,
            &quot;Classic-Flang&quot;: &quot;Classic-Flang&quot;,
            &quot;intel&quot;: &quot;intel&quot;,
            &quot;intelmpi&quot;: &quot;iimpi&quot;,
            &quot;gompi&quot;: &quot;gompi&quot;,
            &quot;openmpi&quot; : &quot;openmpi&quot;,
            &quot;mpich&quot; : &quot;mpich&quot;,
            &quot;cmake&quot; : &quot;CMake&quot;
        }</value>
      </parameter>
      <parameter name="modulenames" type="string" separator=";" duplicate="none" mode="python">
        <value>{key:value for (key, value) in list(${modulenames_defaults}.items()) + list(${modulenames_updated}.items())}</value>
        <selection>{'gcc': 'GCC', 'clang': 'Clang', 'intelmpi': 'iimpi', 'cmake': 'CMake', 'Classic-Flang': 'Classic-Flang', 'intel': 'intel', 'gompi': 'gompi', 'openmpi': 'openmpi', 'mpich': 'mpich'}</selection>
      </parameter>
      <parameter name="modules" type="string" separator=";" duplicate="none" mode="python">
        <value>{
              &quot;gcc&quot;:                &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;gcc/8.3.0&quot;:          &quot;{0[gcc]}/8.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.3.0&quot;:          &quot;{0[gcc]}/9.3.0&quot;.format(${modulenames}),
              &quot;gcc/9.4.0&quot;:          &quot;{0[gcc]}/9.4.0&quot;.format(${modulenames}),
              &quot;gcc/10.2.0&quot;:         &quot;{0[gcc]}/10.2.0&quot;.format(${modulenames}),
              &quot;gcc/10.3.0&quot;:         &quot;{0[gcc]}/10.3.0&quot;.format(${modulenames}),
              &quot;gcc/11.2.0&quot;:         &quot;{0[gcc]}/11.2.0&quot;.format(${modulenames}),
              &quot;gcc/11.3.0&quot;:         &quot;{0[gcc]}/11.3.0&quot;.format(${modulenames}),
              &quot;clang&quot;:              &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/13.0.1&quot;:       &quot;{0[clang]}/13.0.1&quot;.format(${modulenames}),
              &quot;clang/15.0.5&quot;:       &quot;{0[clang]}/15.0.5&quot;.format(${modulenames}),
              &quot;clang/16.0.6&quot;:       &quot;{0[clang]}/16.0.6&quot;.format(${modulenames}),
              &quot;Classic-Flang&quot;:      &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;Classic-Flang/16.0.4-c23&quot;:  &quot;{0[Classic-Flang]}/16.0.4-c23&quot;.format(${modulenames}),
              &quot;intel&quot;       :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2019b&quot; :       &quot;{0[intel]}/2019b&quot;.format(${modulenames}),
              &quot;intel/2020a&quot; :       &quot;{0[intel]}/2020a&quot;.format(${modulenames}),
              &quot;intel/2020b&quot; :       &quot;{0[intel]}/2020b&quot;.format(${modulenames}),
              &quot;intel/2021a&quot; :       &quot;{0[intel]}/2021a&quot;.format(${modulenames}),
              &quot;intel/2021b&quot; :       &quot;{0[intel]}/2021b&quot;.format(${modulenames}),
              &quot;intel/2022a&quot; :       &quot;{0[intel]}/2022a&quot;.format(${modulenames}),
              &quot;intel/2022b&quot; :       &quot;{0[intel]}/2022b&quot;.format(${modulenames}),
              &quot;intel/2023a&quot; :       &quot;{0[intel]}/2023a&quot;.format(${modulenames}),
              &quot;gompi/2020a&quot; :       &quot;{0[gompi]}/2020a&quot;.format(${modulenames}),
              &quot;gompi/2020b&quot; :       &quot;{0[gompi]}/2020b&quot;.format(${modulenames}),
              &quot;gompi/2021a&quot; :       &quot;{0[gompi]}/2021a&quot;.format(${modulenames}),
              &quot;gompi/2021b&quot; :       &quot;{0[gompi]}/2021b&quot;.format(${modulenames}),
              &quot;gompi/2022a&quot; :       &quot;{0[gompi]}/2022a&quot;.format(${modulenames}),
              &quot;gompi/2022b&quot; :       &quot;{0[gompi]}/2022b&quot;.format(${modulenames}),
              &quot;gompi/2023a&quot; :       &quot;{0[gompi]}/2023a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022a&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2022b&quot;.format(${modulenames}),
              &quot;intelmpi&quot;:           &quot;{0[intelmpi]}/2023a&quot;.format(${modulenames}),
              &quot;openmpi&quot;:            &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.0.3&quot;:      &quot;{0[openmpi]}/4.0.3&quot;.format(${modulenames}),
              &quot;openmpi/4.0.5&quot;:      &quot;{0[openmpi]}/4.0.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.1&quot;:      &quot;{0[openmpi]}/4.1.1&quot;.format(${modulenames}),
              &quot;openmpi/4.1.4&quot;:      &quot;{0[openmpi]}/4.1.4&quot;.format(${modulenames}),
              &quot;openmpi/4.1.5&quot;:      &quot;{0[openmpi]}/4.1.5&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6&quot;:      &quot;{0[openmpi]}/4.1.6&quot;.format(${modulenames}),
              &quot;openmpi/4.1.6-ucx16&quot;:      &quot;{0[openmpi]}/4.1.6-ucx16&quot;.format(${modulenames}),
              &quot;mpich&quot;:              &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;mpich/4.1.2&quot;:        &quot;{0[mpich]}/4.1.2&quot;.format(${modulenames}),
              &quot;cmake&quot;:               &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.21.1&quot;:        &quot;{0[cmake]}/3.21.1&quot;.format(${modulenames}),
              &quot;cmake/3.22.1&quot;:        &quot;{0[cmake]}/3.22.1&quot;.format(${modulenames}),
              &quot;cmake/3.23.1&quot;:        &quot;{0[cmake]}/3.23.1&quot;.format(${modulenames}),
              &quot;cmake/3.24.3&quot;:        &quot;{0[cmake]}/3.24.3&quot;.format(${modulenames}),
              &quot;cmake/3.26.3&quot;:        &quot;{0[cmake]}/3.26.3&quot;.format(${modulenames})    
          }</value>
        <selection>{'gcc': 'GCC/11.3.0', 'gcc/8.3.0': 'GCC/8.3.0', 'gcc/9.3.0': 'GCC/9.3.0', 'gcc/9.4.0': 'GCC/9.4.0', 'gcc/10.2.0': 'GCC/10.2.0', 'gcc/10.3.0': 'GCC/10.3.0', 'gcc/11.2.0': 'GCC/11.2.0', 'gcc/11.3.0': 'GCC/11.3.0', 'clang': 'Clang/13.0.1', 'clang/13.0.1': 'Clang/13.0.1', 'clang/15.0.5': 'Clang/15.0.5', 'clang/16.0.6': 'Clang/16.0.6', 'Classic-Flang': 'Classic-Flang/16.0.4-c23', 'Classic-Flang/16.0.4-c23': 'Classic-Flang/16.0.4-c23', 'intel': 'intel/2022a', 'intel/2019b': 'intel/2019b', 'intel/2020a': 'intel/2020a', 'intel/2020b': 'intel/2020b', 'intel/2021a': 'intel/2021a', 'intel/2021b': 'intel/2021b', 'intel/2022a': 'intel/2022a', 'intel/2022b': 'intel/2022b', 'intel/2023a': 'intel/2023a', 'gompi/2020a': 'gompi/2020a', 'gompi/2020b': 'gompi/2020b', 'gompi/2021a': 'gompi/2021a', 'gompi/2021b': 'gompi/2021b', 'gompi/2022a': 'gompi/2022a', 'gompi/2022b': 'gompi/2022b', 'gompi/2023a': 'gompi/2023a', 'intelmpi': 'iimpi/2023a', 'openmpi': 'openmpi/4.1.4', 'openmpi/4.0.3': 'openmpi/4.0.3', 'openmpi/4.0.5': 'openmpi/4.0.5', 'openmpi/4.1.1': 'openmpi/4.1.1', 'openmpi/4.1.4': 'openmpi/4.1.4', 'openmpi/4.1.5': 'openmpi/4.1.5', 'openmpi/4.1.6': 'openmpi/4.1.6', 'openmpi/4.1.6-ucx16': 'openmpi/4.1.6-ucx16', 'mpich': 'mpich/4.1.2', 'mpich/4.1.2': 'mpich/4.1.2', 'cmake': 'CMake/3.23.1', 'cmake/3.21.1': 'CMake/3.21.1', 'cmake/3.22.1': 'CMake/3.22.1', 'cmake/3.23.1': 'CMake/3.23.1', 'cmake/3.24.3': 'CMake/3.24.3', 'cmake/3.26.3': 'CMake/3.26.3'}</selection>
      </parameter>
      <parameter name="prerequisite_modules_dict" type="string" separator=";" duplicate="none" mode="python">
        <value>{
            &quot;clang/13.0.1&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/15.0.5&quot;:       [&quot;GCCcore/.11.3.0&quot;, &quot;GCC/11.3.0&quot;],
            &quot;clang/16.0.6&quot;:       [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;Classic-Flang/16.0.4-c23&quot;:  [&quot;GCCcore/.12.3.0&quot;, &quot;GCC/12.3.0&quot;],
            &quot;intelmpi/2021.6.0&quot;:  [&quot;intel-compilers/2022.1.0&quot;],
            &quot;openmpi/4.0.3&quot;:      [&quot;GCC/9.3.0&quot;],
            &quot;openmpi/4.0.5&quot;:      [&quot;GCC/10.2.0&quot;],
            &quot;openmpi/4.1.1&quot;:      [&quot;GCC/11.2.0&quot;],
            &quot;openmpi/4.1.4&quot;:      [&quot;GCC/11.3.0&quot;],
            &quot;openmpi/4.1.5&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6&quot;:      [&quot;GCC/12.3.0&quot;],
            &quot;openmpi/4.1.6-ucx16&quot;:      [&quot;GCC/12.3.0&quot;],
        }</value>
        <selection>{'clang/13.0.1': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/15.0.5': ['GCCcore/.11.3.0', 'GCC/11.3.0'], 'clang/16.0.6': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'Classic-Flang/16.0.4-c23': ['GCCcore/.12.3.0', 'GCC/12.3.0'], 'intelmpi/2021.6.0': ['intel-compilers/2022.1.0'], 'openmpi/4.0.3': ['GCC/9.3.0'], 'openmpi/4.0.5': ['GCC/10.2.0'], 'openmpi/4.1.1': ['GCC/11.2.0'], 'openmpi/4.1.4': ['GCC/11.3.0'], 'openmpi/4.1.5': ['GCC/12.3.0'], 'openmpi/4.1.6': ['GCC/12.3.0'], 'openmpi/4.1.6-ucx16': ['GCC/12.3.0']}</selection>
      </parameter>
      <parameter name="cmake_version" type="string" separator="," duplicate="none" mode="text">
        <value>3.26.3</value>
      </parameter>
      <parameter name="cmake_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;cmake/${cmake_version}&quot;) if $modules.get(&quot;cmake/${cmake_version}&quot;) else $modules.get(&quot;cmake&quot;, &quot;cmake/${cmake_version}&quot;)</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="prerequisite_toolchain_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__toolchain_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_compiler_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__compiler_module&quot;, &quot; &quot;))</value>
        <selection> </selection>
      </parameter>
      <parameter name="prerequisite_mpi_module" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>&quot; &quot;.join($prerequisite_modules_dict.get(&quot;$__mpi_module&quot;, &quot; &quot;))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="prerequisite_modules" type="string" separator="," duplicate="none" mode="text">
        <value>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2</value>
      </parameter>
      <parameter name="toolchain_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${toolchain_name}/${toolchain_version}&quot;, $modules.get(&quot;${toolchain_name}&quot;, &quot;${toolchain_name}&quot; + (&quot;/${toolchain_version}&quot; if &quot;${toolchain_version}&quot; else &quot;&quot;)))</value>
        <selection>GCC/12.3.0</selection>
      </parameter>
      <parameter name="compiler_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${compiler_name}/${compiler_version}&quot;, $modules.get(&quot;${compiler_name}&quot;, &quot;${compiler_name}&quot; + (&quot;/${compiler_version}&quot; if &quot;${compiler_version}&quot; else &quot;&quot;)))</value>
        <selection>Classic-Flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="mpi_module" type="string" separator=";" duplicate="none" mode="python">
        <value>$modules.get(&quot;${mpi_name}/${mpi_version}&quot;, $modules.get(&quot;${mpi_name}&quot;, &quot;${mpi_name}&quot; + (&quot;/${mpi_version}&quot; if &quot;${mpi_version}&quot; else &quot;&quot;)))</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="required_modules" type="string" separator="," duplicate="none" mode="text">
        <value>${prerequisite_modules} ${toolchain_module} ${mpi_module} ${compiler_module} ${cmake_module} ${must_prerequisite_modules}</value>
        <selection>SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3</selection>
      </parameter>
      <parameter name="use_modules" type="string" separator="," duplicate="none" mode="text">
        <value>/home/rwth1269/modules</value>
      </parameter>
      <parameter name="load_modules" type="string" separator="," duplicate="none" mode="text">
        <value>module use /home/rwth1269/modules/; module purge; for path in ${use_modules}; do module use $path; done; for modulename in ${required_modules}; do module load $modulename; done</value>
        <selection>module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done</selection>
      </parameter>
      <parameter name="__toolchain_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${toolchain_module}&quot;.lower()</value>
        <selection>gcc/12.3.0</selection>
      </parameter>
      <parameter name="__compiler_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${compiler_module}&quot;.lower()</value>
        <selection>classic-flang/16.0.4-c23</selection>
      </parameter>
      <parameter name="__mpi_module" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${mpi_module}&quot;.lower()</value>
        <selection>openmpi/4.1.6</selection>
      </parameter>
      <parameter name="force_compilation" type="string" separator="," duplicate="none" mode="text">
        <value>true</value>
      </parameter>
      <parameter name="executable_full_name" type="string" separator="," duplicate="none" mode="text">
        <value>${executable_name}${executable_extension}</value>
        <selection>bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="compile_preparation" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_flags" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
         &quot;tsan&quot;: &quot;${must_stats_compile_flags} -g&quot;,
         &quot;tsan-opt&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags} -g --optimizations ${must_compile_opt}&quot;,
         &quot;isl&quot;: &quot;${must_stats_compile_flags} ${must_isl_compile_flags}&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>  -g --optimizations ALX1000,CLUSTER</selection>
      </parameter>
      <parameter name="tsan_opt_extension" type="string" separator="," duplicate="none" mode="text">
        <value>.tsan-opt.${__tsan_opt_hash}</value>
        <selection>.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="executable_extension" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;&quot;,
        &quot;tsan&quot;: &quot;.tsan&quot;,
        &quot;tsan-opt&quot;: &quot;${tsan_opt_extension}&quot;,
        &quot;isl&quot;: &quot;.isl&quot;}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="compile_target" type="string" separator="," duplicate="none" mode="text">
        <value>bt-rma</value>
      </parameter>
      <parameter name="benchmark_build_dir" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;${jube_benchmark_home}/executables/${__toolchain_module}/${__compiler_module}/${__mpi_module}/&quot; + (&quot;${RMA_target}&quot; if &quot;${RMA_target}&quot;.split() else &quot;Default&quot;)</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/executables/gcc/12.3.0/classic-flang/16.0.4-c23/openmpi/4.1.6/Default</selection>
      </parameter>
      <parameter name="do_compile" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_compilation} || [ ! -f &quot;${benchmark_build_dir}/${executable_full_name}&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="compile_common_env_vars" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;:     &quot;MPICC='mpicc ${compile_flags}' MPICXX='mpicxx ${compile_flags}' MPIFC='mpifc ${compile_flags}'&quot;,
         &quot;tsan&quot;:     &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;tsan-opt&quot;: &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;,
         &quot;isl&quot;:      &quot;MPICC=\&quot;${MUSTCC} --wrap-target mpicc ${compile_flags}\&quot; MPICXX=\&quot;${MUSTCXX} --wrap-target mpicxx ${compile_flags}\&quot; MPIFC=\&quot;${MUSTFC} --wrap-target mpif90 ${compile_flags}\&quot;&quot;}.get(&quot;${compile_mode}&quot;, '')</value>
        <selection>MPICC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc   -g --optimizations ALX1000,CLUSTER&quot; MPICXX=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx   -g --optimizations ALX1000,CLUSTER&quot; MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort --wrap-target mpif90   -g --optimizations ALX1000,CLUSTER&quot;</selection>
      </parameter>
      <parameter name="compile_env_vars" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="compile_export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${compile_common_env_vars} ${compile_env_vars}; do export &quot;$item&quot;; done</value>
        <selection>for item in MPICC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc   -g --optimizations ALX1000,CLUSTER&quot; MPICXX=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx   -g --optimizations ALX1000,CLUSTER&quot; MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort --wrap-target mpif90   -g --optimizations ALX1000,CLUSTER&quot; ; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="time_output_file" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>${jube_wp_abspath}/time.out</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out</selection>
      </parameter>
      <parameter name="time_measure_command" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="executable_name" type="string" separator="," duplicate="none" mode="text">
        <value>${compile_target}.${CLASS}.x</value>
        <selection>bt-rma.D.x</selection>
      </parameter>
      <parameter name="RMA_target" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="export_flags" type="string" separator="!NONE!" duplicate="none" mode="python">
        <value>{&quot;base&quot;: 'OMPI_FC=flang MPIFC=&quot;mpif90&quot; FFLAGS=&quot;-g -O3&quot;',
        &quot;tsan&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 ${must_stats_compile_flags}&quot;',
        &quot;tsan-opt&quot;: 'OMPI_FC=flang MPIFC=&quot;${MUSTFC}&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 --optimizations ${must_compile_opt} -g ${must_stats_compile_flags}&quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 --optimizations ${must_compile_opt} ${must_stats_compile_flags}&quot;'}.get(&quot;${compile_mode}&quot;, 0)</value>
        <selection>OMPI_FC=flang MPIFC=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort&quot; FFLAGS=&quot;-O3 --wrap-target mpif90 --optimizations ALX1000,CLUSTER -g &quot; FLINKFLAGS=&quot;-O3 -g --wrap-target mpif90 --optimizations ALX1000,CLUSTER &quot;</selection>
      </parameter>
      <parameter name="export_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{
              (&quot;clang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intelmpi&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;, &quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;clang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;intel&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;clang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;],
              (&quot;Classic-Flang&quot;, &quot;mpich&quot;): [&quot;MPICH_CC=clang&quot;, &quot;MPICH_CXX=clang++&quot;],
              (&quot;Classic-Flang&quot;, &quot;openmpi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
              (&quot;Classic-Flang&quot;, &quot;gompi&quot;): [&quot;OMPI_CC=clang&quot;, &quot;OMPI_CXX=clang++&quot;, &quot;OMPI_FC=flang&quot;, &quot;SLURM_MPI_TYPE=pmi2&quot;, &quot;OMPI_MCA_btl=^ofi,openib,tcp&quot;, &quot;OMPI_MCA_mtl=^ofi&quot;,&quot;UCX_UD_MLX5_TIMEOUT=2m&quot;],
          }</value>
      </parameter>
      <parameter name="compiler_mpi_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${mpi_name}&quot;), []))</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m</selection>
      </parameter>
      <parameter name="compiler_toolchain_export" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join($export_dict.get((&quot;${compiler_name}&quot;,&quot;${toolchain_name}&quot;), []))</value>
        <selection/>
      </parameter>
      <parameter name="required_exports" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${compiler_mpi_export} ${compiler_toolchain_export} ${openmp_export} ${must_export}</value>
        <selection>OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="export" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>for item in ${required_exports}; do export &quot;$item&quot;; done</value>
        <selection>for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done</selection>
      </parameter>
      <parameter name="must_compile_opt" type="string" separator=";" duplicate="none" mode="python">
        <value>{&quot;tsan-opt&quot;: &quot;ALX1000,CLUSTER&quot;}.get(&quot;${compile_mode}&quot;, &quot;&quot;)</value>
        <selection>ALX1000,CLUSTER</selection>
      </parameter>
      <parameter name="__tsan_opt_hash" type="string" separator=";" duplicate="none" mode="shell">
        <value>echo -n &quot;$must_compile_opt $__must_hash&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>1</parents>
    <iteration_siblings>4</iteration_siblings>
    <environment>
      <env name="LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:/home/ss540294/opt/lib:/home/ss540294/bin/lib:/home/ss540294/jack/usr/lib64'</env>
      <env name="EBVERSIONXZ">'5.4.2'</env>
      <env name="_ModuleTable017_">'Y3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0MvMTIuMy4wIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wIgosICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlIiwgIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5lcnMiCiwg'</env>
      <env name="EBROOTBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENACC">'LWZvcGVuYWNj'</env>
      <env name="EBROOTCLANG">'/work/rwth1269/software/c23/classic-flang'</env>
      <env name="__LMOD_STACK_FLAGS_FREE">'LWZmcmVlLWZvcm0='</env>
      <env name="__LMOD_REF_COUNT_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:1;/work/rwth1269/software/c23/classic-flang/bin:1;/work/rwth1269/software/openmpi/4.1.6/bin:1;/work/rwth1269/software/netcdf/4.9.2/bin:1;/work/rwth1269/software/gpi/1.5.1-ompi/bin:1;/work/rwth1269/software/sos/1.5.2-ompi/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:1;/home/ss540294/software/stress/usr/bin:2;/home/ss540294/software/ccache/bin:2;/home/ss540294/.local/bin:2;/home/ss540294/software/mpiP/bin:2;/home/ss540294/software/git/bin:2;/home/ss540294/htop/bin:2;/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:1;/usr/local_host/bin:1;/usr/local_host/sbin:1;/usr/local_rwth/bin:1;/usr/local_rwth/sbin:1;/usr/bin:1;/usr/sbin:1;/bin:1;/sbin:1;/opt/singularity/bin:1;/usr/local/bin:1;/usr/local/sbin:1;/opt/slurm/current/sbin:1;/opt/slurm/current/bin:1;/home/ss540294/dotfiles/tools/diff-so-fancy:2;/home/ss540294/dotfiles/zsh/plugins/fzf/bin:1'</env>
      <env name="_ModuleTable002_">'MDAwMjYuMDAwMDAwMDAzLip6ZmluYWwiLAp9LApbIkNsYXNzaWMtRmxhbmciXSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9DbGFzc2ljLUZsYW5nLzE2LjAuNC1jMjMubHVhIiwKZnVsbE5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKbG9hZE9yZGVyID0gMTYsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAwLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiQ2xhc3NpYy1GbGFuZy8xNi4wLjQtYzIzIiwKd1YgPSAiMDAwMDAwMDE2LjAwMDAwMDAwMC4wMDAwMDAwMDQuKmMuMDAwMDAwMDIzLip6ZmluYWwiLAp9LApHQ0MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBo'</env>
      <env name="FLAGS_FAST_NO_FPOPT">'-O3 -mtune=native'</env>
      <env name="EBVERSIONNUMACTL">'2.0.16'</env>
      <env name="EBROOTGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable019_">'ZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvcmUiCiwgIi93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvQ29udGFpbmVycyIsICIvd29yay9yd3RoMTI2OS9tb2R1bGVzIiwgIi9ob21lL3J3dGgxMjY5L21vZHVsZXMiLCAiL2hvbWUvc3M1NDAyOTQvLm1vZHVsZXMiLCAiL3dvcmsvc3M1NDAyOTQvbW9kdWxlcyIsCn0sCnN5c3RlbUJhc2VNUEFUSCA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db3JlOi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbnRhaW5l'</env>
      <env name="_ModuleTable008_">'eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2JpbnV0aWxzLzIuNDAubHVhIiwKZnVsbE5hbWUgPSAiYmludXRpbHMvMi40MCIsCmxvYWRPcmRlciA9IDksCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiYmludXRpbHMvMi40MCIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwNDAuKnpmaW5hbCIsCn0sCmJ6aXAyID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9iemlwMi8xLjAuOC5sdWEiLApm'</env>
      <env name="FLAGS_GCCcore_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="FLINKFLAGS">'-O3 -g --wrap-target mpif90 --optimizations ALX1000,CLUSTER'</env>
      <env name="EBDEVELNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-numactl-2.0.16-easybuild-devel'</env>
      <env name="__LMOD_STACK_F77">'Z2ZvcnRyYW4gLWZuby1zaWduLXplcm8='</env>
      <env name="EBDEVELBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-bzip2-1.0.8-easybuild-devel'</env>
      <env name="GCCcore_ROOT">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="__LMOD_REF_COUNT_XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:1;/work/rwth1269/software/c23/classic-flang/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:1;/usr/local/share:1;/usr/share:1'</env>
      <env name="OBJC">'gcc'</env>
      <env name="EBROOTNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0'</env>
      <env name="_ModuleTable007_">'PSAiMDAwMDAwMDAxLjAwMDAwMDAxNC4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClhaID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9YWi81LjQuMi5sdWEiLApmdWxsTmFtZSA9ICJYWi81LjQuMiIsCmxvYWRPcmRlciA9IDUsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSA0LApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiWFovNS40LjIiLAp3ViA9ICIwMDAwMDAwMDUuMDAwMDAwMDA0LjAwMDAwMDAwMi4qemZpbmFsIiwKfSwKYmludXRpbHMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51'</env>
      <env name="__LMOD_STACK_CC">'Z2Nj'</env>
      <env name="EBROOTCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0'</env>
      <env name="FLAGS_OFFLOAD_OPENMP">'-fopenmp'</env>
      <env name="__LMOD_REF_COUNT_LD_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1;/home/ss540294/opt/lib:2;/home/ss540294/bin/lib:2;/home/ss540294/jack/usr/lib64:2'</env>
      <env name="__LMOD_REF_COUNT_PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig:1'</env>
      <env name="OBJCXX">'g++'</env>
      <env name="EBROOTGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="_ModuleTable015_">'b2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9udW1hY3RsLzIuMC4xNi5sdWEiLApmdWxsTmFtZSA9ICJudW1hY3RsLzIuMC4xNiIsCmxvYWRPcmRlciA9IDMsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAibnVtYWN0bC8yLjAuMTYiLAp3ViA9ICIwMDAwMDAwMDIuMDAwMDAwMDAwLjAwMDAwMDAxNi4qemZpbmFsIiwKfSwKb3Blbm1waSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9vcGVubXBpLzQuMS42Lmx1YSIsCmZ1bGxOYW1lID0gIm9wZW5tcGkvNC4xLjYiLApsb2FkT3JkZXIgPSAxNSwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFt'</env>
      <env name="__LMOD_STACK_FC">'Z2ZvcnRyYW4='</env>
      <env name="_ModuleTable004_">'ZGVyID0gMSwKcHJvcFQgPSB7CnR5cGVfID0gewpjb21waWxlciA9IDEsCn0sCn0sCnN0YWNrRGVwdGggPSAxLApzdGF0dXMgPSAiYWN0aXZlIiwKdXNlck5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxMi4wMDAwMDAwMDMuKnpmaW5hbCIsCn0sCkdQSSA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9HUEkvMS41LjEtb21waS5sdWEiLApmdWxsTmFtZSA9ICJHUEkvMS41LjEtb21waSIsCmxvYWRPcmRlciA9IDEyLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkdQSS8xLjUuMS1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDEuKm9tcGku'</env>
      <env name="EBVERSIONGCC">'12.3.0'</env>
      <env name="EBVERSIONUCX">'1.14.1'</env>
      <env name="EBDEVELXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-XZ-5.4.2-easybuild-devel'</env>
      <env name="EBDEVELHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-hwloc-2.9.1-easybuild-devel'</env>
      <env name="CC">'clang'</env>
      <env name="MPI_BINDIR">'/work/rwth1269/software/openmpi/4.1.6/bin'</env>
      <env name="EBROOTZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_FLAGS_AUTOPAR">'false'</env>
      <env name="EBDEVELLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libxml2-2.11.4-easybuild-devel'</env>
      <env name="__LMOD_STACK_OBJCXX">'Zysr'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64:1'</env>
      <env name="EBVERSIONHWLOC">'2.9.1'</env>
      <env name="EBVERSIONGCCCORE">'12.3.0'</env>
      <env name="_ModuleTable012_">'c2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlicGNpYWNjZXNzLzAuMTcubHVhIiwKZnVsbE5hbWUgPSAibGlicGNpYWNjZXNzLzAuMTciLApsb2FkT3JkZXIgPSA3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnBjaWFjY2Vzcy8wLjE3IiwKd1YgPSAiMDAwMDAwMDAwLjAwMDAwMDAxNy4qemZpbmFsIiwKfSwKbGlieG1sMiA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvbGlieG1sMi8yLjExLjQubHVhIiwKZnVs'</env>
      <env name="EBROOTXZ">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0'</env>
      <env name="OMPI_CXX">'clang++'</env>
      <env name="EBROOTLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0'</env>
      <env name="MPICXX">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx --wrap-target mpicxx   -g --optimizations ALX1000,CLUSTER'</env>
      <env name="__LMOD_STACK_FLAGS_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_REF_COUNT_MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:1;/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:8;/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:5;/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:8;/work/ss540294/.local/easybuild/modules/all/Core:16;/work/ss540294/.local/easybuild/modules/all/Containers:16;/work/rwth1269/modules:9;/home/rwth1269/modules:10;/home/ss540294/.modules:11;/work/ss540294/modules:11'</env>
      <env name="EBDEVELLIBARCHIVE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libarchive-3.6.2-easybuild-devel'</env>
      <env name="EBROOTBZIP2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0'</env>
      <env name="CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:/work/rwth1269/software/c23/classic-flang:/work/rwth1269/software/openmpi/4.1.6:/work/rwth1269/software/netcdf/4.9.2:/work/rwth1269/software/gpi/1.5.1-ompi:/work/rwth1269/software/sos/1.5.2-ompi:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0'</env>
      <env name="LASTCOMPILER">'GCCcore'</env>
      <env name="EBDEVELUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-UCX-1.14.1-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_RUNTIME_LINKER">'LVdsLC1ycGF0aD0='</env>
      <env name="CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:/work/rwth1269/software/c23/classic-flang/include:/work/rwth1269/software/openmpi/4.1.6/include:/work/rwth1269/software/netcdf/4.9.2/include:/work/rwth1269/software/gpi/1.5.1-ompi/include:/work/rwth1269/software/sos/1.5.2-ompi/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include'</env>
      <env name="__LMOD_STACK_FLAGS_FAST_NO_FPOPT">'LU8zIC1tdHVuZT1uYXRpdmU='</env>
      <env name="F77">'gfortran -fno-sign-zero'</env>
      <env name="EBDEVELCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-cURL-8.0.1-easybuild-devel'</env>
      <env name="EBROOTCURL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0'</env>
      <env name="XDG_DATA_DIRS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share:/work/rwth1269/software/c23/classic-flang/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share:/usr/local/share:/usr/share'</env>
      <env name="OSHCXX">'oshcxx'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="UCX_UD_MLX5_TIMEOUT">'2m'</env>
      <env name="FLAGS_FREE">'-ffree-form'</env>
      <env name="MPI_NAME">'OpenMPI'</env>
      <env name="EBVERSIONLIBPCIACCESS">'0.17'</env>
      <env name="__LMOD_STACK_FLAGS_ARCH64">'LW02NA=='</env>
      <env name="EBROOTLIBXML2">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0'</env>
      <env name="CURL_INCLUDES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include'</env>
      <env name="__LMOD_REF_COUNT_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:1;/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:1;/work/rwth1269/software/c23/classic-flang/lib:1;/work/rwth1269/software/openmpi/4.1.6/lib:1;/work/rwth1269/software/netcdf/4.9.2/lib:1;/work/rwth1269/software/gpi/1.5.1-ompi/lib64:1;/work/rwth1269/software/sos/1.5.2-ompi/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:1;/home/ss540294/bin/lib:2'</env>
      <env name="FLAGS_OFFLOAD_OPENACC">'-fopenacc'</env>
      <env name="EBVERSIONLIBXML2">'2.11.4'</env>
      <env name="FLAGS_OPENMP">'-fopenmp'</env>
      <env name="LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib:/work/rwth1269/software/c23/classic-flang/lib/x86_64-unknown-linux-gnu:/work/rwth1269/software/c23/classic-flang/lib:/work/rwth1269/software/openmpi/4.1.6/lib:/work/rwth1269/software/netcdf/4.9.2/lib:/work/rwth1269/software/gpi/1.5.1-ompi/lib64:/work/rwth1269/software/sos/1.5.2-ompi/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib:/home/ss540294/bin/lib'</env>
      <env name="__LMOD_REF_COUNT_CMAKE_PREFIX_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0:1;/work/rwth1269/software/c23/classic-flang:1;/work/rwth1269/software/openmpi/4.1.6:1;/work/rwth1269/software/netcdf/4.9.2:1;/work/rwth1269/software/gpi/1.5.1-ompi:1;/work/rwth1269/software/sos/1.5.2-ompi:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0:1'</env>
      <env name="_ModuleTable010_">'CnVzZXJOYW1lID0gImNVUkwvOC4wLjEiLAp3ViA9ICIwMDAwMDAwMDguMDAwMDAwMDAwLjAwMDAwMDAwMS4qemZpbmFsIiwKfSwKaHdsb2MgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2h3bG9jLzIuOS4xLmx1YSIsCmZ1bGxOYW1lID0gImh3bG9jLzIuOS4xIiwKbG9hZE9yZGVyID0gOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJod2xvYy8yLjkuMSIsCndWID0gIjAwMDAwMDAwMi4wMDAwMDAwMDkuMDAwMDAwMDAxLip6ZmluYWwiLAp9LApsaWJhcmNoaXZl'</env>
      <env name="_ModuleTable001_">'X01vZHVsZVRhYmxlXyA9IHsKTVR2ZXJzaW9uID0gMywKY19yZWJ1aWxkVGltZSA9IGZhbHNlLApjX3Nob3J0VGltZSA9IGZhbHNlLApkZXB0aFQgPSB7fSwKZmFtaWx5ID0ge30sCm1UID0gewpDTWFrZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvQ01ha2UvMy4yNi4zLmx1YSIsCmZ1bGxOYW1lID0gIkNNYWtlLzMuMjYuMyIsCmxvYWRPcmRlciA9IDIxLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIkNNYWtlLzMuMjYuMyIsCndWID0gIjAwMDAwMDAwMy4wMDAw'</env>
      <env name="LOADEDMODULES">'GCCcore/.12.3.0:zlib/1.2.13:numactl/2.0.16:UCX/1.14.1:XZ/5.4.2:libxml2/2.11.4:libpciaccess/0.17:hwloc/2.9.1:binutils/2.40:ncurses/6.4:SOS/1.5.2-ompi:GPI/1.5.1-ompi:netcdf/4.9.2:GCC/12.3.0:openmpi/4.1.6:Classic-Flang/16.0.4-c23:bzip2/1.0.8:OpenSSL/1.1:cURL/8.0.1:libarchive/3.6.2:CMake/3.26.3'</env>
      <env name="FC">'flang'</env>
      <env name="__LMOD_REF_COUNT_ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal:1'</env>
      <env name="FLAGS_MPI_BATCH">''</env>
      <env name="__LMOD_REF_COUNT_MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:1;/work/rwth1269/software/c23/classic-flang/share/man:1;/work/rwth1269/software/openmpi/4.1.6/share/man:1;/work/rwth1269/software/netcdf/4.9.2/share/man:1;/work/rwth1269/software/gpi/1.5.1-ompi/share/man:1;/work/rwth1269/software/sos/1.5.2-ompi/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:1;/usr/local_host/man:1;/usr/local_rwth/man:1;/usr/man:1;/usr/share/man:1;/usr/local/man:1;/usr/local/share/man:1;/opt/slurm/current/share/man:1'</env>
      <env name="_ModuleTable006_">'IDExLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIlNPUy8xLjUuMi1vbXBpIiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwNS4wMDAwMDAwMDIuKm9tcGkuKnpmaW5hbCIsCn0sClVDWCA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29tcGlsZXIvR0NDY29yZS8xMi4zLjAvVUNYLzEuMTQuMS5sdWEiLApmdWxsTmFtZSA9ICJVQ1gvMS4xNC4xIiwKbG9hZE9yZGVyID0gNCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJVQ1gvMS4xNC4xIiwKd1Yg'</env>
      <env name="__LMOD_STACK_OBJC">'Z2Nj'</env>
      <env name="MPI_INCLUDE">'/work/rwth1269/software/openmpi/4.1.6/include'</env>
      <env name="_ModuleTable003_">'aXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvR0NDLzEyLjMuMC5sdWEiLApmdWxsTmFtZSA9ICJHQ0MvMTIuMy4wIiwKbG9hZE9yZGVyID0gMTQsCnByb3BUID0gewp0eXBlXyA9IHsKdG9vbGNoYWluID0gMSwKfSwKfSwKc3RhY2tEZXB0aCA9IDAsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJHQ0MvMTIuMy4wIiwKd1YgPSAiMDAwMDAwMDEyLjAwMDAwMDAwMy4qemZpbmFsIiwKfSwKR0NDY29yZSA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwvc2FwcGhpcmVyYXBpZHMvbW9kdWxlcy9hbGwvQ29yZS9HQ0Njb3JlLy4xMi4zLjAubHVhIiwKZnVsbE5hbWUgPSAiR0NDY29yZS8uMTIuMy4wIiwKbG9hZE9y'</env>
      <env name="MPICC">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc --wrap-target mpicc   -g --optimizations ALX1000,CLUSTER'</env>
      <env name="_ModuleTable013_">'bE5hbWUgPSAibGlieG1sMi8yLjExLjQiLApsb2FkT3JkZXIgPSA2LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMywKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImxpYnhtbDIvMi4xMS40IiwKd1YgPSAiMDAwMDAwMDAyLjAwMDAwMDAxMS4wMDAwMDAwMDQuKnpmaW5hbCIsCn0sCm5jdXJzZXMgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL25jdXJzZXMvNi40Lmx1YSIsCmZ1bGxOYW1lID0gIm5jdXJzZXMvNi40IiwKbG9hZE9yZGVyID0gMTAsCnByb3BUID0ge30sCnN0YWNrRGVwdGggPSAzLApzdGF0dXMgPSAi'</env>
      <env name="MPIFC">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort'</env>
      <env name="EBDEVELLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-libpciaccess-0.17-easybuild-devel'</env>
      <env name="__LMOD_STACK_CPP">'Y3Bw'</env>
      <env name="CXX">'clang++'</env>
      <env name="_ModuleTable016_">'ZSA9ICJvcGVubXBpLzQuMS42IiwKd1YgPSAiMDAwMDAwMDA0LjAwMDAwMDAwMS4wMDAwMDAwMDYuKnpmaW5hbCIsCn0sCnpsaWIgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL3psaWIvMS4yLjEzLmx1YSIsCmZ1bGxOYW1lID0gInpsaWIvMS4yLjEzIiwKbG9hZE9yZGVyID0gMiwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDMsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJ6bGliLzEuMi4xMyIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDIuMDAwMDAwMDEzLip6ZmluYWwiLAp9LAp9LAptcGF0aEEgPSB7CiIv'</env>
      <env name="_ModuleTable009_">'dWxsTmFtZSA9ICJiemlwMi8xLjAuOCIsCmxvYWRPcmRlciA9IDE3LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gImJ6aXAyLzEuMC44IiwKd1YgPSAiMDAwMDAwMDAxLjAwMDAwMDAwMC4wMDAwMDAwMDguKnpmaW5hbCIsCn0sCmNVUkwgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTIuMy4wL2NVUkwvOC4wLjEubHVhIiwKZnVsbE5hbWUgPSAiY1VSTC84LjAuMSIsCmxvYWRPcmRlciA9IDE5LApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMSwKc3RhdHVzID0gImFjdGl2ZSIs'</env>
      <env name="FLAGS_FAST">'-O3 -ffast-math -mtune=native'</env>
      <env name="EBDEVELGCCCORE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/easybuild/Core-GCCcore-.12.3.0-easybuild-devel'</env>
      <env name="EBROOTHWLOC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable_Sz_">'20'</env>
      <env name="__LMOD_REF_COUNT_CPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/include:1;/work/rwth1269/software/c23/classic-flang/include:1;/work/rwth1269/software/openmpi/4.1.6/include:1;/work/rwth1269/software/netcdf/4.9.2/include:1;/work/rwth1269/software/gpi/1.5.1-ompi/include:1;/work/rwth1269/software/sos/1.5.2-ompi/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include/libxml2:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/include:1;/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/include:1'</env>
      <env name="__LMOD_STACK_FLAGS_PIC">'LWZQSUMgLXNoYXJlZA=='</env>
      <env name="EBDEVELNCURSES">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-ncurses-6.4-easybuild-devel'</env>
      <env name="_ModuleTable018_">'Ii93b3JrL3NzNTQwMjk0Ly5sb2NhbC9lYXN5YnVpbGQvbW9kdWxlcy9hbGwvTVBJL2ludGVsLzIwMjIuMS4wL2ltcGkvMjAyMS42LjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9pbnRlbC8yMDIyLjEuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQ2NvcmUvMTEuMy4wIgosICIvd29yay9zczU0MDI5NC8ubG9jYWwvZWFzeWJ1aWxkL21vZHVsZXMvYWxsL0NvbXBpbGVyL0dDQy8xMi4zLjAiLCAiL3dvcmsvc3M1NDAyOTQvLmxvY2FsL2Vhc3lidWlsZC9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMCIsICIvd29yay9zczU0MDI5NC8ubG9jYWwv'</env>
      <env name="OSHCC">'oshcc'</env>
      <env name="OMPI_FC">'flang'</env>
      <env name="EBDEVELBINUTILS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-binutils-2.40-easybuild-devel'</env>
      <env name="SHLVL">'6'</env>
      <env name="ACLOCAL_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/aclocal:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/aclocal'</env>
      <env name="MPIEXEC">'srun'</env>
      <env name="FFLAGS">'-O3 --wrap-target mpif90 --optimizations ALX1000,CLUSTER -g'</env>
      <env name="MANPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/man:/work/rwth1269/software/c23/classic-flang/share/man:/work/rwth1269/software/openmpi/4.1.6/share/man:/work/rwth1269/software/netcdf/4.9.2/share/man:/work/rwth1269/software/gpi/1.5.1-ompi/share/man:/work/rwth1269/software/sos/1.5.2-ompi/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/share/man:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/share/man:/usr/local_host/man:/usr/local_rwth/man:/usr/man:/usr/share/man:/usr/local/man:/usr/local/share/man:/opt/slurm/current/share/man'</env>
      <env name="EBDEVELGCC">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCC/12.3.0/easybuild/Core-GCC-12.3.0-easybuild-devel'</env>
      <env name="MPI_LIBDIR">'/work/rwth1269/software/openmpi/4.1.6/lib'</env>
      <env name="__LMOD_STACK_FLAGS_OFFLOAD_OPENMP">'LWZvcGVubXA='</env>
      <env name="__LMOD_STACK_LASTCOMPILER">'R0NDY29yZQ=='</env>
      <env name="FLAGS_RPATH">'-Wl,-rpath=/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="MODULEPATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCC/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Containers:/work/ss540294/.local/easybuild/modules/all/MPI/intel/2022.1.0/impi/2021.6.0:/work/ss540294/.local/easybuild/modules/all/Compiler/intel/2022.1.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/11.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCC/12.3.0:/work/ss540294/.local/easybuild/modules/all/Compiler/GCCcore/12.3.0:/work/ss540294/.local/easybuild/modules/all/Core:/work/ss540294/.local/easybuild/modules/all/Containers:/work/rwth1269/modules:/home/rwth1269/modules:/home/ss540294/.modules:/work/ss540294/modules'</env>
      <env name="OMPI_CC">'clang'</env>
      <env name="EBVERSIONBINUTILS">'2.40'</env>
      <env name="EBDEVELZLIB">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-zlib-1.2.13-easybuild-devel'</env>
      <env name="__LMOD_STACK_FLAGS_FAST">'LU8zIC1mZmFzdC1tYXRoIC1tdHVuZT1uYXRpdmU='</env>
      <env name="PATH">'//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/bin:/work/rwth1269/software/c23/classic-flang/bin:/work/rwth1269/software/openmpi/4.1.6/bin:/work/rwth1269/software/netcdf/4.9.2/bin:/work/rwth1269/software/gpi/1.5.1-ompi/bin:/work/rwth1269/software/sos/1.5.2-ompi/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/ncurses/6.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/binutils/2.40-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/sbin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/bin:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/bin:/home/ss540294/software/stress/usr/bin:/home/ss540294/software/ccache/bin:/home/ss540294/.local/bin:/home/ss540294/software/mpiP/bin:/home/ss540294/software/git/bin:/home/ss540294/htop/bin:/rwthfs/rz/cluster/home/ss540294/.vscode-server/cli/servers/Stable-e170252f762678dec6ca2cc69aba1570769a5d39/server/bin/remote-cli:/usr/local_host/bin:/usr/local_host/sbin:/usr/local_rwth/bin:/usr/local_rwth/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/singularity/bin:/usr/local/bin:/usr/local/sbin:/opt/slurm/current/sbin:/opt/slurm/current/bin:/home/ss540294/dotfiles/tools/diff-so-fancy:/home/ss540294/dotfiles/zsh/plugins/fzf/bin'</env>
      <env name="_ModuleTable014_">'YWN0aXZlIiwKdXNlck5hbWUgPSAibmN1cnNlcy82LjQiLAp3ViA9ICIwMDAwMDAwMDYuMDAwMDAwMDA0Lip6ZmluYWwiLAp9LApuZXRjZGYgPSB7CmZuID0gIi9ob21lL3J3dGgxMjY5L21vZHVsZXMvbmV0Y2RmLzQuOS4yLmx1YSIsCmZ1bGxOYW1lID0gIm5ldGNkZi80LjkuMiIsCmxvYWRPcmRlciA9IDEzLApwcm9wVCA9IHt9LApzdGFja0RlcHRoID0gMCwKc3RhdHVzID0gImFjdGl2ZSIsCnVzZXJOYW1lID0gIm5ldGNkZi80LjkuMiIsCndWID0gIjAwMDAwMDAwNC4wMDAwMDAwMDkuMDAwMDAwMDAyLip6ZmluYWwiLAp9LApudW1hY3RsID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9t'</env>
      <env name="_LMFILES_">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCCcore/.12.3.0.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/zlib/1.2.13.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/numactl/2.0.16.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/UCX/1.14.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/XZ/5.4.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libxml2/2.11.4.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libpciaccess/0.17.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/hwloc/2.9.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/binutils/2.40.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/ncurses/6.4.lua:/home/rwth1269/modules/SOS/1.5.2-ompi.lua:/home/rwth1269/modules/GPI/1.5.1-ompi.lua:/home/rwth1269/modules/netcdf/4.9.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/GCC/12.3.0.lua:/home/rwth1269/modules/openmpi/4.1.6.lua:/home/rwth1269/modules/Classic-Flang/16.0.4-c23.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/bzip2/1.0.8.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Core/OpenSSL/1.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/cURL/8.0.1.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/libarchive/3.6.2.lua:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/modules/all/Compiler/GCCcore/12.3.0/CMake/3.26.3.lua'</env>
      <env name="EBROOTLIBPCIACCESS">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0'</env>
      <env name="PKG_CONFIG_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libarchive/3.6.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/cURL/8.0.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/OpenSSL/1.1/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/bzip2/1.0.8-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/hwloc/2.9.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libpciaccess/0.17-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/libxml2/2.11.4-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/XZ/5.4.2-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0/lib/pkgconfig:/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/zlib/1.2.13-GCCcore-12.3.0/lib/pkgconfig'</env>
      <env name="__LMOD_STACK_FLAGS_DEBUG">'LWc='</env>
      <env name="_ModuleTable011_">'ID0gewpmbiA9ICIvY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9tb2R1bGVzL2FsbC9Db21waWxlci9HQ0Njb3JlLzEyLjMuMC9saWJhcmNoaXZlLzMuNi4yLmx1YSIsCmZ1bGxOYW1lID0gImxpYmFyY2hpdmUvMy42LjIiLApsb2FkT3JkZXIgPSAyMCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDEsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJsaWJhcmNoaXZlLzMuNi4yIiwKd1YgPSAiMDAwMDAwMDAzLjAwMDAwMDAwNi4wMDAwMDAwMDIuKnpmaW5hbCIsCn0sCmxpYnBjaWFjY2VzcyA9IHsKZm4gPSAiL2N2bWZzL3NvZnR3YXJlLmhwYy5yd3RoLmRlL0xpbnV4L1JIOC94ODZfNjQvaW50ZWwv'</env>
      <env name="OMPI_MCA_mtl">'^ofi'</env>
      <env name="EBROOTNUMACTL">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/numactl/2.0.16-GCCcore-12.3.0'</env>
      <env name="__LMOD_STACK_CXX">'Zysr'</env>
      <env name="CMAKE_LIBRARY_PATH">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/GCCcore/12.3.0/lib64'</env>
      <env name="__LMOD_STACK_FLAGS_RPATH">'LVdsLC1ycGF0aD0vY3ZtZnMvc29mdHdhcmUuaHBjLnJ3dGguZGUvTGludXgvUkg4L3g4Nl82NC9pbnRlbC9zYXBwaGlyZXJhcGlkcy9zb2Z0d2FyZS9HQ0Njb3JlLzEyLjMuMC9saWI2NA=='</env>
      <env name="CPP">'cpp'</env>
      <env name="EBROOTUCX">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/UCX/1.14.1-GCCcore-12.3.0'</env>
      <env name="_ModuleTable005_">'KnpmaW5hbCIsCn0sCk9wZW5TU0wgPSB7CmZuID0gIi9jdm1mcy9zb2Z0d2FyZS5ocGMucnd0aC5kZS9MaW51eC9SSDgveDg2XzY0L2ludGVsL3NhcHBoaXJlcmFwaWRzL21vZHVsZXMvYWxsL0NvcmUvT3BlblNTTC8xLjEubHVhIiwKZnVsbE5hbWUgPSAiT3BlblNTTC8xLjEiLApsb2FkT3JkZXIgPSAxOCwKcHJvcFQgPSB7fSwKc3RhY2tEZXB0aCA9IDIsCnN0YXR1cyA9ICJhY3RpdmUiLAp1c2VyTmFtZSA9ICJPcGVuU1NMLzEuMSIsCndWID0gIjAwMDAwMDAwMS4wMDAwMDAwMDEuKnpmaW5hbCIsCn0sClNPUyA9IHsKZm4gPSAiL2hvbWUvcnd0aDEyNjkvbW9kdWxlcy9TT1MvMS41LjItb21waS5sdWEiLApmdWxsTmFtZSA9ICJTT1MvMS41LjItb21waSIsCmxvYWRPcmRlciA9'</env>
      <env name="EBDEVELCMAKE">'/cvmfs/software.hpc.rwth.de/Linux/RH8/x86_64/intel/sapphirerapids/software/CMake/3.26.3-GCCcore-12.3.0/easybuild/Compiler-GCCcore-12.3.0-CMake-3.26.3-easybuild-devel'</env>
      <env name="_ModuleTable020_">'cnMiLAp9Cg=='</env>
      <env name="LMOD_FAMILY_MPI">'OpenMPI'</env>
      <env name="OMPI_MCA_btl">'^ofi,openib,tcp'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
      <nonenv name="intel_compilers_FC"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI_VERSION"/>
      <nonenv name="RWTH_HPC_FAMILY_MPI"/>
      <nonenv name="__LMOD_STACK_LASTMPI"/>
      <nonenv name="EBVERSIONIMKLMINFFTW"/>
      <nonenv name="I_MPI_PMI_LIBRARY"/>
      <nonenv name="OCL_ICD_FILENAMES"/>
      <nonenv name="LMOD_FAMILY_MPI_VERSION"/>
      <nonenv name="intel_compilers_CC"/>
      <nonenv name="FLAGS_intel_compilers_AUTOPAR"/>
      <nonenv name="FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="EBROOTHTOP"/>
      <nonenv name="EBDEVELSQLITE"/>
      <nonenv name="EBDEVELIMKL"/>
      <nonenv name="EBVERSIONINTELMINCOMPILERS"/>
      <nonenv name="EBROOTIMKL"/>
      <nonenv name="FLAGS_intel_compilers_RPATH"/>
      <nonenv name="__LMOD_REF_COUNT_NLSPATH"/>
      <nonenv name="intel_compilers_ROOT"/>
      <nonenv name="EBROOTLIBFFI"/>
      <nonenv name="__LMOD_REF_COUNT_FI_PROVIDER_PATH"/>
      <nonenv name="FI_PROVIDER_PATH"/>
      <nonenv name="__LMOD_REF_COUNT_PYTHONPATH"/>
      <nonenv name="__LMOD_REF_COUNT_DIAGUTIL_PATH"/>
      <nonenv name="INTEL_PYTHONHOME"/>
      <nonenv name="CLASSPATH"/>
      <nonenv name="FLAGS_intel_compilers_DEBUG"/>
      <nonenv name="FLAGS_intel_compilers_FAST"/>
      <nonenv name="EBDEVELIMPI"/>
      <nonenv name="DAPL_CM_ROUTE_TIMEOUT_MS"/>
      <nonenv name="FPGA_VARS_DIR"/>
      <nonenv name="CMPLR_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_RUNTIME_LINKER"/>
      <nonenv name="EBROOTINTEL"/>
      <nonenv name="__LMOD_STACK_MPICXX"/>
      <nonenv name="EBVERSIONSQLITE"/>
      <nonenv name="FLAGS_intel_compilers_OPENMP"/>
      <nonenv name="EBVERSIONHTOP"/>
      <nonenv name="EBVERSIONLIBFFI"/>
      <nonenv name="EBROOTIMPI"/>
      <nonenv name="FLAGS_intel_compilers_FREE"/>
      <nonenv name="__LMOD_STACK_MPICC"/>
      <nonenv name="EBROOTINTELMINCOMPILERS"/>
      <nonenv name="EBROOTSQLITE"/>
      <nonenv name="R_MPI_ROOT"/>
      <nonenv name="EBROOTLIBREADLINE"/>
      <nonenv name="GDB_INFO"/>
      <nonenv name="INTELFPGAOCLSDKROOT"/>
      <nonenv name="EBDEVELIMKLMINFFTW"/>
      <nonenv name="EBDEVELGMP"/>
      <nonenv name="__LMOD_REF_COUNT_INFOPATH"/>
      <nonenv name="INTELARCH"/>
      <nonenv name="EBDEVELTCL"/>
      <nonenv name="EBDEVELPYTHON"/>
      <nonenv name="EBVERSIONGMP"/>
      <nonenv name="NLSPATH"/>
      <nonenv name="EBVERSIONTCL"/>
      <nonenv name="EBDEVELINTEL"/>
      <nonenv name="EBDEVELHTOP"/>
      <nonenv name="EBEXTSLISTPYTHON"/>
      <nonenv name="_ModuleTable021_"/>
      <nonenv name="EBROOTPYTHON"/>
      <nonenv name="MKL_EXAMPLES"/>
      <nonenv name="DIAGUTIL_PATH"/>
      <nonenv name="EBVERSIONPYTHON"/>
      <nonenv name="EBDEVELINTELMINCOMPILERS"/>
      <nonenv name="EBROOTTCL"/>
      <nonenv name="I_MPI_FABRICS"/>
      <nonenv name="__LMOD_REF_COUNT_FLEXIBLAS_LIBRARY_PATH"/>
      <nonenv name="__LMOD_STACK_MPIF77"/>
      <nonenv name="I_MPI_OFI_PROVIDER"/>
      <nonenv name="EBDEVELLIBFFI"/>
      <nonenv name="__LMOD_STACK_MPIFC"/>
      <nonenv name="EBVERSIONIMPI"/>
      <nonenv name="LASTMPI"/>
      <nonenv name="I_MPI_JOB_SIGNAL_PROPAGATION"/>
      <nonenv name="FLAGS_intel_compilers_PIC"/>
      <nonenv name="EBROOTGMP"/>
      <nonenv name="FLAGS_intel_compilers_FAST_NO_FPOPT"/>
      <nonenv name="PYTHONPATH"/>
      <nonenv name="MPIF77"/>
      <nonenv name="EBROOTIMKLMINFFTW"/>
      <nonenv name="intel_compilers_F77"/>
      <nonenv name="FLAGS_AUTOPAR"/>
      <nonenv name="EBDEVELLIBREADLINE"/>
      <nonenv name="ONEAPI_ROOT"/>
      <nonenv name="MKLROOT"/>
      <nonenv name="intel_compilers_CXX"/>
      <nonenv name="TBBROOT"/>
      <nonenv name="EBVERSIONINTEL"/>
      <nonenv name="EBVERSIONLIBREADLINE"/>
      <nonenv name="INFOPATH"/>
      <nonenv name="I_MPI_ROOT"/>
      <nonenv name="FLAGS_intel_compilers_ARCH64"/>
      <nonenv name="EBVERSIONIMKL"/>
      <nonenv name="EBDEVELJUBE"/>
      <nonenv name="EBROOTJUBE"/>
      <nonenv name="EBVERSIONJUBE"/>
      <nonenv name="__LMOD_REF_COUNT_JUBE_INCLUDE_PATH"/>
      <nonenv name="JUBE_INCLUDE_PATH"/>
      <nonenv name="_ModuleTable022_"/>
    </environment>
  </workpackage>
  <workpackage id="5">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>8,7,6,5,9</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="6">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>8,7,6,5,9</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="7">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>8,7,6,5,9</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="8">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>8,7,6,5,9</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="9">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>8,7,6,5,9</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="10">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>13,14,11,12,10</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="11">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>13,14,11,12,10</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="12">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>13,14,11,12,10</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="13">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>13,14,11,12,10</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="14">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>13,14,11,12,10</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="15">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>16,17,18,19,15</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="16">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>16,17,18,19,15</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="17">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>16,17,18,19,15</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="18">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>16,17,18,19,15</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="19">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>16,17,18,19,15</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="20">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>24,22,23,21,20</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="21">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>24,22,23,21,20</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="22">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>24,22,23,21,20</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="23">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>24,22,23,21,20</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="24">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>24,22,23,21,20</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="25">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>27,28,26,29,25</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="26">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>27,28,26,29,25</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="27">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>27,28,26,29,25</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="28">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>27,28,26,29,25</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="29">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>27,28,26,29,25</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="30">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>33,30,31,34,32</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="31">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>33,30,31,34,32</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="32">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>33,30,31,34,32</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="33">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>33,30,31,34,32</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="34">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="0">base</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection/>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>2</parents>
    <iteration_siblings>33,30,31,34,32</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000002_compile_base/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="35">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>36,37,39,38,35</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="36">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>36,37,39,38,35</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="37">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>36,37,39,38,35</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="38">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>36,37,39,38,35</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="39">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>49</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="0">49</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (49) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>49000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>49</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 49</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 49 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>36,37,39,38,35</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="40">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>42,41,43,40,44</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="41">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>42,41,43,40,44</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="42">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>42,41,43,40,44</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="43">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>42,41,43,40,44</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="44">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>3</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>100</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="1">100</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (100) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>100000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>100</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 100</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 100 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>42,41,43,40,44</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="45">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>49,48,45,46,47</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="46">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>49,48,45,46,47</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="47">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>49,48,45,46,47</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="48">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>49,48,45,46,47</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="49">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>196</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="2">196</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (196) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>196000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>196</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 196</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 196 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>49,48,45,46,47</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="50">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>54,51,50,52,53</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="51">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>54,51,50,52,53</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="52">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>54,51,50,52,53</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="53">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>54,51,50,52,53</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="54">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>5</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>225</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="3">225</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (225) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>225000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>225</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 225</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 225 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>54,51,50,52,53</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="55">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>58,55,59,57,56</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="56">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>58,55,59,57,56</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="57">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>58,55,59,57,56</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="58">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>58,55,59,57,56</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="59">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>8</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>361</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="4">361</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (361) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>361000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>361</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 361</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 361 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>58,55,59,57,56</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="60">
    <step iteration="0" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>60,61,62,64,63</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="61">
    <step iteration="1" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>60,61,62,64,63</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="62">
    <step iteration="2" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>60,61,62,64,63</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="63">
    <step iteration="3" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>60,61,62,64,63</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
  <workpackage id="64">
    <step iteration="4" cycle="0">execute</step>
    <parameterset>
      <parameter name="nodes" type="string" separator="," duplicate="none" mode="python">
        <value>__import__(&quot;math&quot;).ceil($tasks/$taskspernode)</value>
        <selection>16</selection>
      </parameter>
      <parameter name="taskspernode" type="int" separator="," duplicate="none" mode="text">
        <value>48</value>
      </parameter>
      <parameter name="threadspertask" type="int" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: ${threads} + ${must_threads_per_task},
         &quot;must&quot;: ${threads} + ${must_threads_per_task}}.get(&quot;${measurement_mode}&quot;, &quot;1&quot;)</value>
        <selection>2</selection>
      </parameter>
      <parameter name="tasks" type="int" separator="," duplicate="none" mode="python">
        <value>${application_tasks} + (${must_tool_processes} if &quot;${measurement_mode}&quot; == &quot;must&quot; else 0)</value>
        <selection>729</selection>
      </parameter>
      <parameter name="OMP_NUM_THREADS" type="int" separator="," duplicate="none" mode="text" export="true">
        <value>$threads</value>
        <selection>1</selection>
      </parameter>
      <parameter name="queue" type="string" separator="," duplicate="none" mode="text">
        <value>c23test</value>
      </parameter>
      <parameter name="account" type="string" separator="," duplicate="none" mode="text">
        <value>supp0006</value>
      </parameter>
      <parameter name="account_slurm" type="string" separator="," duplicate="none" mode="python">
        <value>&quot;#SBATCH --account=$account&quot; if &quot;$account&quot; else &quot;&quot;</value>
        <selection>#SBATCH --account=supp0006</selection>
      </parameter>
      <parameter name="gres" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="executable" type="string" separator="," duplicate="none" mode="text">
        <value>compile/${executable_full_name}</value>
        <selection>compile/bt-rma.D.x.tsan-opt.f686f791bbfcf8d98529e0563aaa0ef7</selection>
      </parameter>
      <parameter name="args_exec" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="mail" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="env" type="string" separator=";" duplicate="none" mode="text">
        <value>$jube_wp_envstr</value>
        <selection>export MUST_RMASANITIZER_PRINT_STATISTICS=&quot;1&quot;
export OMP_NUM_THREADS=&quot;1&quot;
export time_output_file=&quot;/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out&quot;
export TSAN_OPTIONS=&quot;$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout&quot;
</selection>
      </parameter>
      <parameter name="notification" type="string" separator="," duplicate="none" mode="text">
        <value>NONE</value>
      </parameter>
      <parameter name="outlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.out</value>
      </parameter>
      <parameter name="errlogfile" type="string" separator="," duplicate="none" mode="text">
        <value>job.err</value>
      </parameter>
      <parameter name="timelimit" type="string" separator="," duplicate="none" mode="text">
        <value>02:00:00</value>
      </parameter>
      <parameter name="preprocess" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          ${load_modules};
          ${export};</value>
        <selection>echo &quot;nodelist=$SLURM_JOB_NODELIST&quot;     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH; do export &quot;$item&quot;; done;</selection>
      </parameter>
      <parameter name="postprocess" type="string" separator="," duplicate="none" mode="text">
        <value>printf &quot;EXECUTION VERIFICATION CHECK: &quot;;if grep -q &quot;\[MUST-REPORT\] Error.*race&quot; job.out || grep -q &quot;^srun: error:&quot; job.err; then echo &quot;FAILURE&quot;; else echo &quot;SUCCESS&quot;; fi</value>
      </parameter>
      <parameter name="measurement" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="additional_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>${benchmark_job_config}
${basic_job_config}
${perftool_job_config}</value>
        <selection>#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}</selection>
      </parameter>
      <parameter name="application_tasks" type="int" separator="," duplicate="none" mode="text">
        <value>49,100,196,225,361,729</value>
        <selection idx="5">729</selection>
      </parameter>
      <parameter name="threads" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="TSAN_OPTIONS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>$$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</value>
        <selection>$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout</selection>
      </parameter>
      <parameter name="basic_job_config" type="string" separator="," duplicate="none" mode="text">
        <value>#SBATCH --ntasks-per-node=${taskspernode}</value>
        <selection>#SBATCH --ntasks-per-node=48</selection>
      </parameter>
      <parameter name="benchmark_job_config" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>#SBATCH --exclusive
#SBATCH --hwctr=likwid</value>
      </parameter>
      <parameter name="platform_name" type="string" separator="," duplicate="none" mode="text">
        <value>CLAIX-23</value>
      </parameter>
      <parameter name="cores_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>96</value>
      </parameter>
      <parameter name="GB_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>256</value>
      </parameter>
      <parameter name="MB_LLC_size" type="int" separator="," duplicate="none" mode="text">
        <value>210</value>
      </parameter>
      <parameter name="LLC_cache_line_size" type="int" separator="," duplicate="none" mode="text">
        <value>64</value>
      </parameter>
      <parameter name="sockets_per_node" type="int" separator="," duplicate="none" mode="text">
        <value>2</value>
      </parameter>
      <parameter name="NUMA_regions" type="int" separator="," duplicate="none" mode="text">
        <value>4</value>
      </parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!" duplicate="none" mode="text">
        <value>tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</value>
        <selection>tasks (729) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</selection>
      </parameter>
      <parameter name="ERROR_tasks" type="string" separator="," duplicate="none" mode="python">
        <value>print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'</value>
        <selection>OK</selection>
      </parameter>
      <parameter name="measurement_mode" type="string" separator="," duplicate="none" mode="text">
        <value>base,must</value>
        <selection idx="1">must</selection>
      </parameter>
      <parameter name="mpirun_dict_default" type="string" separator=";" duplicate="none" mode="text">
        <value>{
          
        }</value>
      </parameter>
      <parameter name="mpirun_dict_updated" type="string" separator=";" duplicate="none" mode="text">
        <value>{}</value>
      </parameter>
      <parameter name="mpirun_dict" type="string" separator=";" duplicate="none" mode="text">
        <value>{key:value for (key, value) in list(${mpirun_dict_default}.items()) + list(${mpirun_dict_updated}.items())}</value>
        <selection>{key:value for (key, value) in list({
          
        }.items()) + list({}.items())}</selection>
      </parameter>
      <parameter name="mpirun" type="string" separator=";" duplicate="none" mode="python">
        <value>$mpirun_dict.get(&quot;${mpi_name}&quot;, &quot;${starter}&quot;)</value>
        <selection>srun</selection>
      </parameter>
      <parameter name="ignorelist" type="string" separator="," duplicate="none" mode="python">
        <value>not (&quot;${measurement_mode}&quot; == &quot;base&quot; and &quot;${compile_mode}&quot; == &quot;base&quot;) and not (&quot;${measurement_mode}&quot; == &quot;must&quot; and &quot;${compile_mode}&quot; == &quot;tsan-opt&quot;)</value>
        <selection>False</selection>
      </parameter>
      <parameter name="submit" type="string" separator="," duplicate="none" mode="text">
        <value>sbatch</value>
      </parameter>
      <parameter name="submit_script" type="string" separator="," duplicate="none" mode="text">
        <value>submit.job</value>
      </parameter>
      <parameter name="done_file" type="string" separator="," duplicate="none" mode="text">
        <value>ready</value>
      </parameter>
      <parameter name="error_file" type="string" separator="," duplicate="none" mode="text">
        <value>error</value>
      </parameter>
      <parameter name="starter" type="string" separator="," duplicate="none" mode="text">
        <value>srun</value>
      </parameter>
      <parameter name="args_starter" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;&quot;,
          &quot;must&quot;: &quot;${must_arguments} --&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran --</selection>
      </parameter>
      <parameter name="shared_folder" type="string" separator="," duplicate="none" mode="text">
        <value>shared</value>
      </parameter>
      <parameter name="shared_job_info" type="string" separator="," duplicate="none" mode="text">
        <value>${shared_folder}/jobid</value>
        <selection>shared/jobid</selection>
      </parameter>
      <parameter name="chainjob_script" type="string" separator="," duplicate="none" mode="text">
        <value>./chainJobs.sh</value>
      </parameter>
      <parameter name="chainjob_needs_submit" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="launcher" type="string" separator="," duplicate="none" mode="python">
        <value>{ &quot;base&quot;: &quot;srun&quot;,
          &quot;must&quot;: &quot;mustrun&quot;}.get(&quot;${measurement_mode}&quot;, 0)</value>
        <selection>mustrun</selection>
      </parameter>
      <parameter name="must_threads_per_task" type="int" separator="," duplicate="none" mode="text">
        <value>1</value>
      </parameter>
      <parameter name="must_tool_processes" type="int" separator="," duplicate="none" mode="text">
        <value>${level2_size}</value>
        <selection>0</selection>
      </parameter>
      <parameter name="must_layout_file" type="string" separator="," duplicate="replace" mode="text">
        <value>must_layout.xml.in</value>
      </parameter>
      <parameter name="level0_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_app</value>
      </parameter>
      <parameter name="level0_size" type="int" separator="," duplicate="none" mode="python">
        <value>1000*${application_tasks}</value>
        <selection>729000</selection>
      </parameter>
      <parameter name="level1_size" type="int" separator="," duplicate="none" mode="text">
        <value>${application_tasks}</value>
        <selection>729</selection>
      </parameter>
      <parameter name="level1_place" type="string" separator="," duplicate="none" mode="text">
        <value>thread_place</value>
      </parameter>
      <parameter name="level2_size" type="int" separator="," duplicate="replace" mode="text">
        <value>0</value>
      </parameter>
      <parameter name="level2_place" type="string" separator="," duplicate="none" mode="text">
        <value>mpi_place</value>
      </parameter>
      <parameter name="MUST_RMASANITIZER_PRINT_STATISTICS" type="string" separator="," duplicate="none" mode="text" export="true">
        <value>1</value>
      </parameter>
      <parameter name="must_verbose" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_layout" type="string" separator="," duplicate="none" mode="text">
        <value>--must:rma-only -n ${application_tasks}</value>
        <selection>--must:rma-only -n 729</selection>
      </parameter>
      <parameter name="must_rma_mode_tsan_opt" type="string" separator="," duplicate="none" mode="text">
        <value>shadow</value>
      </parameter>
      <parameter name="must_rma_mode" type="string" separator="," duplicate="none" mode="python">
        <value>{&quot;base&quot;: &quot;shadow&quot;,
         &quot;tsan&quot;: &quot;shadow&quot;,
         &quot;tsan-opt&quot;: &quot;${must_rma_mode_tsan_opt}&quot;,
         &quot;isl&quot;: &quot;isl&quot;}.get(&quot;${compile_mode}&quot;, &quot;shadow&quot;)</value>
        <selection>shadow</selection>
      </parameter>
      <parameter name="must_additional_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>--must:language fortran</value>
      </parameter>
      <parameter name="must_arguments" type="string" separator="," duplicate="none" mode="text">
        <value>${must_verbose} --must:output stdout --must:mpiexec ${mpirun} ${must_layout} --must:rma-mode ${must_rma_mode} ${must_additional_arguments}</value>
        <selection> --must:output stdout --must:mpiexec srun --must:rma-only -n 729 --must:rma-mode shadow --must:language fortran</selection>
      </parameter>
      <parameter name="must_commit" type="string" separator="," duplicate="none" mode="text">
        <value>HEAD</value>
      </parameter>
      <parameter name="build_must" type="string" separator="," duplicate="none" mode="shell">
        <value>if ${force_must_build} || [ ! -f &quot;${mustbin_path}/mustrun&quot; ]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>0
</selection>
      </parameter>
      <parameter name="must_prerequisite_modules" type="string" separator=";" duplicate="none" mode="python">
        <value>&quot; &quot;.join(${prerequisite_modules_dict}.get(&quot;${cmake_module}&quot;, []) + [&quot;${cmake_module}&quot;])</value>
        <selection>CMake/3.26.3</selection>
      </parameter>
      <parameter name="must_root" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/${__must_hash}</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="must_build_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/build</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/build</selection>
      </parameter>
      <parameter name="must_install_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${must_root}/install</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install</selection>
      </parameter>
      <parameter name="must_repo_folder" type="string" separator="," duplicate="none" mode="text">
        <value>${jube_benchmark_home}/../../dep/MUST/repo</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/repo</selection>
      </parameter>
      <parameter name="mustbin_path" type="string" separator="," duplicate="none" mode="text">
        <value>${must_install_folder}/bin</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin</selection>
      </parameter>
      <parameter name="must_stats_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="must_isl_compile_flags" type="string" separator="," duplicate="none" mode="text">
        <value/>
      </parameter>
      <parameter name="MUSTCC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cc</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cc</selection>
      </parameter>
      <parameter name="MUSTCXX" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-cxx</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-cxx</selection>
      </parameter>
      <parameter name="MUSTFC" type="string" separator="," duplicate="none" mode="text">
        <value>${mustbin_path}/must-fort</value>
        <selection>/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin/must-fort</selection>
      </parameter>
      <parameter name="must_export" type="string" separator="," duplicate="none" mode="text">
        <value>PATH=/${mustbin_path}:$PATH</value>
        <selection>PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/00fc12af05de4d1d572fa57899019d10/install/bin:$PATH</selection>
      </parameter>
      <parameter name="must_available" type="int" separator="," duplicate="none" mode="shell">
        <value>if [[ -f &quot;${mustbin_path}/mustrun&quot; ]]; then echo &quot;1&quot;; else echo &quot;0&quot;; fi</value>
        <selection>1
</selection>
      </parameter>
      <parameter name="force_must_build" type="string" separator="," duplicate="none" mode="text">
        <value>false</value>
      </parameter>
      <parameter name="__must_hash" type="string" separator="," duplicate="none" mode="shell">
        <value>echo -n &quot;${__must_commit} ${must_git_branch} ${__toolchain_module} ${__compiler_module} ${__mpi_module}&quot; | md5sum | cut -f 1 -d &quot; &quot; | tr -d '\n'</value>
        <selection>00fc12af05de4d1d572fa57899019d10</selection>
      </parameter>
      <parameter name="SOLVER" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="EXCHG" type="string" separator="," duplicate="none" mode="text">
        <value>FENCE</value>
      </parameter>
      <parameter name="CLASS" type="string" separator="," duplicate="none" mode="text">
        <value>D</value>
      </parameter>
    </parameterset>
    <parents>4</parents>
    <iteration_siblings>60,61,62,64,63</iteration_siblings>
    <environment>
      <env name="MUST_RMASANITIZER_PRINT_STATISTICS">'1'</env>
      <env name="time_output_file">'/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000125/000004_compile_tsan-opt/work/time.out'</env>
      <env name="TSAN_OPTIONS">'$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout'</env>
      <env name="SHLVL">'5'</env>
      <env name="OMP_NUM_THREADS">'1'</env>
      <env name="BASH_FUNC_module%%">'() {  if [ -z &quot;${LMOD_SH_DBG_ON+x}&quot; ]; then\n case &quot;$-&quot; in\n *v*x*)\n __lmod_sh_dbg=\'vx\'\n ;;\n *v*)\n __lmod_sh_dbg=\'v\'\n ;;\n *x*)\n __lmod_sh_dbg=\'x\'\n ;;\n esac;\n fi;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n set +$__lmod_sh_dbg;\n echo &quot;Shell debugging temporarily silenced: export LMOD_SH_DBG_ON=1 for Lmod\'s output&quot; 1&gt;&amp;2;\n fi;\n eval &quot;$($LMOD_CMD shell &quot;$@&quot;)&quot; &amp;&amp; eval &quot;$(${LMOD_SETTARG_CMD:-:} -s sh)&quot;;\n __lmod_my_status=$?;\n if [ -n &quot;${__lmod_sh_dbg:-}&quot; ]; then\n echo &quot;Shell debugging restarted&quot; 1&gt;&amp;2;\n set -$__lmod_sh_dbg;\n fi;\n unset __lmod_sh_dbg;\n return $__lmod_my_status\n}'</env>
    </environment>
  </workpackage>
</workpackages>
