#!/bin/bash -x
#SBATCH --job-name="BT-RMA_base_base_9"
#SBATCH --mail-user=
#SBATCH --mail-type=NONE
#SBATCH --nodes=3
#SBATCH --ntasks=100
#SBATCH --cpus-per-task=2
#SBATCH --time=02:00:00
#SBATCH --output=job.out
#SBATCH --error=job.err
#SBATCH --partition=c23test
#SBATCH --gres=NONE
#SBATCH --account=supp0006
#SBATCH --exclusive
#SBATCH --hwctr=likwid
#SBATCH --ntasks-per-node=48
${perftool_job_config}

export INTERNAL_GTI_PRINT_MEMORY_CONSUMPTION="1"
export LD_PRELOAD="/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/ed5e6a5b09f336a9fe8d4b2ff9b12f96/install/modules/libPrintMemUsage.so"
export MUST_RMASANITIZER_PRINT_STATISTICS="1"
export OMP_NUM_THREADS="1"
export time_output_file="/rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/BT-RMA.benchmarks/000144/000002_compile_base/work/time.out"
export TSAN_OPTIONS="$TSAN_OPTIONS ignore_noninstrumented_modules=1 exitcode=0 log_path=stdout symbolize=false"


echo "nodelist=$SLURM_JOB_NODELIST"     
          SOURCE_DIR=compile/copy_source;
          LAYOUT_DIR=$PWD;
          COMPILE_DIR=compile;
          module use /home/rwth1269/modules/; module purge; for path in /home/rwth1269/modules; do module use $path; done; for modulename in SOS/1.5.2-ompi GPI/1.5.1-ompi netcdf/4.9.2 GCC/12.3.0 openmpi/4.1.6 Classic-Flang/16.0.4-c23 CMake/3.26.3 CMake/3.26.3; do module load $modulename; done;
          for item in OMPI_CC=clang OMPI_CXX=clang++ OMPI_FC=flang SLURM_MPI_TYPE=pmi2 OMPI_MCA_btl=^ofi,openib,tcp OMPI_MCA_mtl=^ofi UCX_UD_MLX5_TIMEOUT=2m  ${openmp_export} PATH=//rwthfs/rz/cluster/home/ss540294/research/RMA_Codes/jube/benchmarks/BT-RMA/../../dep/MUST/ed5e6a5b09f336a9fe8d4b2ff9b12f96/install/bin:$PATH; do export "$item"; done;

JUBE_ERR_CODE=$?
if [ $JUBE_ERR_CODE -ne 0 ]; then
    touch error
    exit $JUBE_ERR_CODE
fi

 srun  compile/bt-rma.D.x 

JUBE_ERR_CODE=$?
if [ $JUBE_ERR_CODE -ne 0 ]; then
    touch error
    exit $JUBE_ERR_CODE
fi

printf "EXECUTION VERIFICATION CHECK: ";if grep -q "\[MUST-REPORT\] Error.*race" job.out || grep -q "^srun: error:" job.err; then echo "FAILURE"; else echo "SUCCESS"; fi

JUBE_ERR_CODE=$?
if [ $JUBE_ERR_CODE -ne 0 ]; then
    touch error
    exit $JUBE_ERR_CODE
fi

touch ready
