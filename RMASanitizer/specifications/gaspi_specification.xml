<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE api-specification SYSTEM "@MUST_SPECIFICATION_DTD_PATH@/api-specification.dtd">
<api-specification unique-name="GASPI">
	<api-headers>
		<header>GASPI.h</header>
		<header>PGASPI.h</header>
	</api-headers>
	<functions>
		<function name="gaspi_config_get" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="config" type="gaspi_config_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_config" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_config_set" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="new_config" type="const gaspi_config_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_new_config" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_version" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="version" type="float*" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_version" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_proc_init" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="VectorClock:init" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:init" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:init" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="post" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_proc_term" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_proc_rank" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="rank" type="gaspi_rank_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_proc_num" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="proc_num" type="gaspi_rank_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_proc_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_proc_kill" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_connect" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_disconnect" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_create" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="gaspi_group_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_delete" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_add" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_commit" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_num" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group_num" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_size" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
				<function-argument name="group_size" type="gaspi_number_t* const" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_group_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_ranks" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
				<function-argument name="group_ranks" type="gaspi_rank_t* const" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_group_ranks" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_group_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group_max" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_alloc" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="1"></function-argument>
				<function-argument name="alloc_policy" type="const gaspi_alloc_t" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:SegmentAlloc" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">getSegmentPtr</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="getSegmentPtr" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_alloc_policy" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_delete" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:SegmentDelete" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_register" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="1"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:SegmentRegister" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_create" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="1"></function-argument>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="2"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="3"></function-argument>
				<function-argument name="alloc_policy" type="const gaspi_alloc_t" intent="in" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="GASPIRMAWrapper:SegmentCreate" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">getSegmentPtr</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="getSegmentPtr" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_alloc_policy" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_bind" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="gaspi_segment_id_t const" intent="in" order="0"></function-argument>
				<function-argument name="pointer" type="gaspi_pointer_t const" intent="in" order="1"></function-argument>
				<function-argument name="size" type="gaspi_size_t const" intent="in" order="2"></function-argument>
				<function-argument name="memory_description" type="gaspi_memory_description_t const" intent="in" order="3"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_pointer" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_memory_description" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_use" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="gaspi_segment_id_t const" intent="in" order="0"></function-argument>
				<function-argument name="pointer" type="gaspi_pointer_t const" intent="in" order="1"></function-argument>
				<function-argument name="size" type="gaspi_size_t const" intent="in" order="2"></function-argument>
				<function-argument name="group" type="gaspi_group_t const" intent="in" order="3"></function-argument>
				<function-argument name="timeout" type="gaspi_timeout_t const" intent="in" order="4"></function-argument>
				<function-argument name="memory_description" type="gaspi_memory_description_t const" intent="in" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_pointer" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_timeout" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_memory_description" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_num" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_num" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_list" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="0"></function-argument>
				<function-argument name="segment_id_list" type="gaspi_segment_id_t* const" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_segment_id_list" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_ptr" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="ptr" type="gaspi_pointer_t*" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_ptr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_segment_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_max" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_write" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="segment_id_remote" type="const gaspi_segment_id_t" intent="in" order="3"></function-argument>
				<function-argument name="offset_remote" type="const gaspi_offset_t" intent="in" order="4"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="5"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="6"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Access" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="2">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MUST_OneSidedChecks" id="1">return1</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="10">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_OneSidedChecks" name="return1" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_read" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="segment_id_remote" type="const gaspi_segment_id_t" intent="in" order="3"></function-argument>
				<function-argument name="offset_remote" type="const gaspi_offset_t" intent="in" order="4"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="5"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="6"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Access" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="2">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="10">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_write_list" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="0"></function-argument>
				<function-argument name="segment_id_local" type="gaspi_segment_id_t* const" intent="in" order="1"></function-argument>
				<function-argument name="offset_local" type="gaspi_offset_t* const" intent="in" order="2"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="3"></function-argument>
				<function-argument name="segment_id_remote" type="gaspi_segment_id_t* const" intent="in" order="4"></function-argument>
				<function-argument name="offset_remote" type="gaspi_offset_t* const" intent="in" order="5"></function-argument>
				<function-argument name="size" type="gaspi_size_t* const" intent="in" order="6"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="7"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AccessList" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNumber2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="2">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertSizePtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="10">
							<op-name group="MUST_OneSidedChecks" id="1">return1</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNumber2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>num</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSizePtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return1" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_read_list" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="0"></function-argument>
				<function-argument name="segment_id_local" type="gaspi_segment_id_t* const" intent="in" order="1"></function-argument>
				<function-argument name="offset_local" type="gaspi_offset_t* const" intent="in" order="2"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="3"></function-argument>
				<function-argument name="segment_id_remote" type="gaspi_segment_id_t* const" intent="in" order="4"></function-argument>
				<function-argument name="offset_remote" type="gaspi_offset_t* const" intent="in" order="5"></function-argument>
				<function-argument name="size" type="gaspi_size_t* const" intent="in" order="6"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="7"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AccessList" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNumber2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="2">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertSizePtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="10">
							<op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
			    <operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNumber2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>num</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSizePtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_wait" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Wait" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_barrier" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:Barrier" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_allreduce" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="buffer_send" type="const gaspi_pointer_t" intent="in" order="0"></function-argument>
				<function-argument name="buffer_receive" type="gaspi_pointer_t const" intent="in" order="1"></function-argument>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="2"></function-argument>
				<function-argument name="operation" type="const gaspi_operation_t" intent="in" order="3"></function-argument>
				<function-argument name="datatype" type="const gaspi_datatype_t" intent="in" order="4"></function-argument>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="5"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="6"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buffer_send" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_buffer_receive" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_operation" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_allreduce_user" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="buffer_send" type="const gaspi_pointer_t" intent="in" order="0"></function-argument>
				<function-argument name="buffer_receive" type="gaspi_pointer_t const" intent="in" order="1"></function-argument>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="2"></function-argument>
				<function-argument name="element_size" type="const gaspi_size_t" intent="in" order="3"></function-argument>
				<function-argument name="reduce_operation" type="gaspi_reduce_operation_t const" intent="in" order="4"></function-argument>
				<function-argument name="reduce_state" type="gaspi_reduce_state_t const" intent="in" order="5"></function-argument>
				<function-argument name="group" type="const gaspi_group_t" intent="in" order="6"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:allToAll" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buffer_send" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_buffer_receive" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_element_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_reduce_operation" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_reduce_state" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertGroup2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>group</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_atomic_fetch_add" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="val_add" type="const gaspi_atomic_value_t" intent="in" order="3"></function-argument>
				<function-argument name="val_old" type="gaspi_atomic_value_t* const" intent="in" order="4"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AtomicAccess" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">getAtomicValueSize</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="getAtomicValueSize" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_val_add" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_val_old" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_atomic_compare_swap" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="comparator" type="const gaspi_atomic_value_t" intent="in" order="3"></function-argument>
				<function-argument name="val_new" type="const gaspi_atomic_value_t" intent="in" order="4"></function-argument>
				<function-argument name="val_old" type="gaspi_atomic_value_t* const" intent="in" order="5"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="6"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AtomicAccess" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">getAtomicValueSize</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="getAtomicValueSize" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_comparator" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_val_new" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_val_old" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_passive_send" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="3"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:signal" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_passive_receive" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rem_rank" type="gaspi_rank_t* const" intent="in" order="2"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="3"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:wait" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">deref_convertRank2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rem_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="deref_convertRank2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rem_rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_notify" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_remote" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="1"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="2"></function-argument>
				<function-argument name="notification_value" type="const gaspi_notification_t" intent="in" order="3"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="4"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Notify" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:signalResource" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_notification_value" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_notify_waitsome" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="notification_begin" type="const gaspi_notification_id_t" intent="in" order="1"></function-argument>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="2"></function-argument>
				<function-argument name="first_id" type="gaspi_notification_id_t* const" intent="in" order="3"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:waitResource" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">deref_convertNotificationID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNumber2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:NotifyWait" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">deref_convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_notification_begin" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_first_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_begin</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="deref_convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>first_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNumber2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>num</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_notify_reset" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="1"></function-argument>
				<function-argument name="old_notification_val" type="gaspi_notification_t* const" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_old_notification_val" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_write_notify" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="segment_id_remote" type="const gaspi_segment_id_t" intent="in" order="3"></function-argument>
				<function-argument name="offset_remote" type="const gaspi_offset_t" intent="in" order="4"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="5"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="6"></function-argument>
				<function-argument name="notification_value" type="const gaspi_notification_t" intent="in" order="7"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="8"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Access" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="2">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MUST_OneSidedChecks" id="1">return1</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="10">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:Notify" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:signalResource" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return1" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_notification_value" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_write_list_notify" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="0"></function-argument>
				<function-argument name="segment_id_local" type="gaspi_segment_id_t* const" intent="in" order="1"></function-argument>
				<function-argument name="offset_local" type="gaspi_offset_t* const" intent="in" order="2"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="3"></function-argument>
				<function-argument name="segment_id_remote" type="gaspi_segment_id_t* const" intent="in" order="4"></function-argument>
				<function-argument name="offset_remote" type="gaspi_offset_t* const" intent="in" order="5"></function-argument>
				<function-argument name="size" type="gaspi_size_t* const" intent="in" order="6"></function-argument>
				<function-argument name="segment_id_notification" type="const gaspi_segment_id_t" intent="in" order="7"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="8"></function-argument>
				<function-argument name="notification_value" type="const gaspi_notification_t" intent="in" order="9"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="10"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="11"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AccessList" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNumber2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="2">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertSizePtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="10">
							<op-name group="MUST_OneSidedChecks" id="1">return1</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:Notify" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:signalResource" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNumber2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>num</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSizePtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return1" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_segment_id_notification" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_notification_value" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_12_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_read_notify" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="segment_id_local" type="const gaspi_segment_id_t" intent="in" order="0"></function-argument>
				<function-argument name="offset_local" type="const gaspi_offset_t" intent="in" order="1"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="2"></function-argument>
				<function-argument name="segment_id_remote" type="const gaspi_segment_id_t" intent="in" order="3"></function-argument>
				<function-argument name="offset_remote" type="const gaspi_offset_t" intent="in" order="4"></function-argument>
				<function-argument name="size" type="const gaspi_size_t" intent="in" order="5"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="6"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="7"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:Access" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="2">convertSegmentID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertOffset2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="1">convertSize2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="10">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:Notify" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:signalResourceLocal" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentID2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffset2int" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSize2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_read_list_notify" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="num" type="const gaspi_number_t" intent="in" order="0"></function-argument>
				<function-argument name="segment_id_local" type="gaspi_segment_id_t* const" intent="in" order="1"></function-argument>
				<function-argument name="offset_local" type="gaspi_offset_t* const" intent="in" order="2"></function-argument>
				<function-argument name="rank" type="const gaspi_rank_t" intent="in" order="3"></function-argument>
				<function-argument name="segment_id_remote" type="gaspi_segment_id_t* const" intent="in" order="4"></function-argument>
				<function-argument name="offset_remote" type="gaspi_offset_t* const" intent="in" order="5"></function-argument>
				<function-argument name="size" type="gaspi_size_t* const" intent="in" order="6"></function-argument>
				<function-argument name="segment_id_notification" type="const gaspi_segment_id_t" intent="in" order="7"></function-argument>
				<function-argument name="notification_id" type="const gaspi_notification_id_t" intent="in" order="8"></function-argument>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="9"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">
                                provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIVectorClockWrapper:tick" group="MUST_VectorClock">
					<analysis-arguments></analysis-arguments>
				</analysis>
				<analysis order="pre" name="GASPIRMAWrapper:AccessList" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertNumber2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="GASPI_Base" id="1">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="6">
							<op-name group="GASPI_Base" id="2">convertSegmentIDPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="GASPI_Base" id="2">convertOffsetPtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="GASPI_Base" id="1">convertSizePtr2intPtr</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="GASPI_Base" id="1">convertQueueID2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="10">
							<op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIRMAWrapper:Notify" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="GASPI_Base" id="1">convertRank2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="GASPIVectorClockWrapper:signalResourceLocal" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="1">
							<op-name group="GASPI_Base" id="1">convertNotificationID2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNumber2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>num</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_local</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSegmentIDPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>segment_id_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertOffsetPtr2intPtr" order="pre" id="2">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>offset_remote</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertSizePtr2intPtr" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>size</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertQueueID2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>queue</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_segment_id_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_offset_local" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_segment_id_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_offset_remote" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_segment_id_notification" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_notification_id" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertNotificationID2int" order="post" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>notification_id</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="GASPI_Base" name="convertRank2int" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>rank</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_size" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="0"></function-argument>
				<function-argument name="queue_size" type="gaspi_number_t* const" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_queue_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_num" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue_num" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_size_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue_size_max" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue_size_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_create" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue" type="gaspi_queue_id_t* const" intent="in" order="0"></function-argument>
				<function-argument name="timeout_ms" type="const gaspi_timeout_t" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_timeout_ms" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_delete" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue" type="const gaspi_queue_id_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_transfer_size_min" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="transfer_size_min" type="gaspi_size_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_transfer_size_min" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_transfer_size_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="transfer_size_max" type="gaspi_size_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_transfer_size_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_notification_num" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="notification_num" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_notification_num" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_passive_transfer_size_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="passive_transfer_size_max" type="gaspi_size_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_passive_transfer_size_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_allreduce_buf_size" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="buf_size" type="gaspi_size_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buf_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_allreduce_elem_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="elem_max" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_elem_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_queue_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="queue_max" type="gaspi_number_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_queue_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_network_type" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="network_type" type="gaspi_network_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_network_type" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_time_ticks" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="ticks" type="gaspi_cycles_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_ticks" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_time_get" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="wtime" type="gaspi_time_t* const" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_wtime" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_state_vec_get" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="state_vector" type="gaspi_state_vector_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_state_vector" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_statistic_verbosity_level" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="_verbosity_level" type="gaspi_number_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1__verbosity_level" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_statistic_counter_max" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="counter_max" type="gaspi_number_t*" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_counter_max" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_statistic_counter_info" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="counter" type="gaspi_statistic_counter_t" intent="in" order="0"></function-argument>
				<function-argument name="counter_argument" type="gaspi_statistic_argument_t*" intent="in" order="1"></function-argument>
				<function-argument name="counter_name" type="gaspi_string_t*" intent="in" order="2"></function-argument>
				<function-argument name="counter_description" type="gaspi_string_t*" intent="in" order="3"></function-argument>
				<function-argument name="verbosity_level" type="gaspi_number_t*" intent="in" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_counter" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_counter_argument" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_counter_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_counter_description" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_verbosity_level" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_statistic_counter_get" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="counter" type="gaspi_statistic_counter_t" intent="in" order="0"></function-argument>
				<function-argument name="argument" type="gaspi_number_t" intent="in" order="1"></function-argument>
				<function-argument name="value" type="unsigned long*" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_counter" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_argument" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_value" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		<function name="gaspi_statistic_counter_reset" return-type="gaspi_return_t">
			<function-arguments>
				<function-argument name="counter" type="gaspi_statistic_counter_t" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_counter" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
	</functions>
</api-specification>
